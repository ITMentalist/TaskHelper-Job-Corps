''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' m_General (Module)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Option Explicit

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' GetSheetFromCodeName (Public Function)
'
'|wb| = [Workbook] Name of the Workbook. |CodeName| = [String] The worksheet's code/secret name
'
'Returns Worksheet As Excel.Worksheet

'Referencing a worksheet's codename instead of the worksheet's regular name (or position)
'   allows users to change the sheet's name (or position) without breaking the relevant macros.
'This function allows worksheet codenames to be referenced even across separate workbooks.

'(SOURCE) D Glancy. (2012, Feb 10). Using Worksheet CodeNames in Other Workbooks [Web log].
'   Retrieved from http://yoursumbuddy.com/using-worksheet-codenames-in-other-workbooks/
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function GetSheetFromCodeName(wb As Workbook, CodeName As String) As Excel.Worksheet

    Dim wsCN As Excel.Worksheet

    If Not Debugger Then On Error Resume Next Else On Error GoTo 0

    For Each wsCN In wb.Worksheets

        If wsCN.CodeName = CodeName Then
            Set GetSheetFromCodeName = wsCN
            Exit For
         End If
    Next wsCN

End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' NavigateSheets (Public Sub)
'
' |strStartSheetCodename| = [String] Name of worksheet to navigate from.
' |strEndSheetCodename| = [String] Name of worksheet to naviage to.
'
'This sub streamlines the user experience by showing only one worksheet at a time.  When the user clicks the
'   commandbutton to move to the next sheet, the previous one closes.
'
'Instead of referencing the sheets' public name, this sub references the sheets' codename.
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub NavigateSheets(strStartSheetCodename As String, strEndSheetCodename As String)

    Dim wsStart As Excel.Worksheet  'Stores starting worksheet
    Dim wsEnd As Excel.Worksheet    'Stores ending worksheet

    If Not Debugger Then On Error Resume Next Else On Error GoTo 0

    'Calls the GetSheetFromCodeName function
    Set wsStart = GetSheetFromCodeName(Workbooks("TaskHelper VBA iSeries.xlsm"), strStartSheetCodename)
    Set wsEnd = GetSheetFromCodeName(Workbooks("TaskHelper VBA iSeries.xlsm"), strEndSheetCodename)

    wsEnd.Visible = xlSheetVisible
    wsEnd.Activate

    wsStart.Visible = xlSheetHidden

End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' RestrictToPositiveWholeNumbers (Public Sub)
'Restricts the textbox to accept only numerals
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub RestrictToPostiveWholeNumbers(KeyAscii As MSForms.ReturnInteger)

Select Case KeyAscii
     Case Asc("0") To Asc("9")
     Case Else
         KeyAscii = 0
 End Select

End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' RestrictToPostiveFloatNumbers (Public Sub)
'Restricts the textbox to accept only real numbers
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub RestrictToPostiveFloatNumbers(KeyAscii As MSForms.ReturnInteger, str_textbox As String)

Select Case KeyAscii
     Case Asc("0") To Asc("9")
     Case Asc(".")
         If InStr(1, str_textbox, ".") > 0 Then
             KeyAscii = 0
         End If
     Case Else
         KeyAscii = 0
 End Select

End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Excel Defaults (Public Subs)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub TurnOffExcelDefaults(ByRef Exception As cException)

    'Pass error handling up the call stack
    On Error GoTo 0

    Exception.Push "[m_General.TurnOffExcelDefaults]"

    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.Calculation = xlCalculationManual
    
    Exception.Pop
    
End Sub
Public Sub TurnOnExcelDefaults(ByRef Exception As cException)

    'Pass error handling up the call stack
    On Error GoTo 0

    Exception.Push "[m_General.TurnOnExcelDefaults]"
    
    Application.Calculation = xlCalculationAutomatic
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    
    Exception.Pop
    
End Sub


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' InitializeAS400 (Public Sub)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub InitializeAS400(ByRef AS400 As cAS400, ByVal letter As String, ByRef Exception As cException)

    'Pass error handling up the call stack
    On Error GoTo 0
    
    Exception.Push "[m_General.InitializeAS400]"
    
    AS400.SessionName = letter

    Set AS400.Session = CreateObject("PCOMM.autECLSession")
    Set AS400.Metrics = CreateObject("PCOMM.autECLWinMetrics")
    Set AS400.Connection = CreateObject("PCOMM.autECLConnList")

    AS400.Session.SetConnectionByName (letter)
    AS400.Metrics.SetConnectionByName (letter)

    Exception.Pop

End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' WaitForReady (Public Sub)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub WaitForReady(ByVal AS400 As cAS400, ByRef Exception As cException)

    'Pass error handling up the call stack
    On Error GoTo 0

    Exception.Push "[m_General.WaitForReady]"

    Dim InitialWaitTime As Long
    InitialWaitTime = 10

    AS400.Presentation.Wait InitialWaitTime
    AS400.Operator.WaitForAppAvailable
    AS400.Operator.WaitForInputReady
    AS400.Presentation AS400.Milliseconds
    
    Exception.Pop

End Sub
