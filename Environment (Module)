''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Environment (Module)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Option Explicit

'Dimensions the Debug Mode
Public Const Debugger As Boolean = True

'Dimensions the color constants. The Variant type is used so as to accommodate different formats,
Public Const cGrey As Variant = &H80000000
Public Const cWhite As Variant = &H80000005

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' GetSheetFromCodeName (Public Function)
'
'|wb| = [Workbook] Name of the Workbook. |CodeName| = [String] The worksheet's code/secret name
'
'Returns Worksheet As Excel.Worksheet

'Referencing a worksheet's codename instead of the worksheet's regular name (or position)
'   allows users to change the sheet's name (or position) without breaking the relevant macros.
'This function allows worksheet codenames to be referenced even across separate workbooks.

'(SOURCE) D Glancy. (2012, Feb 10). Using Worksheet CodeNames in Other Workbooks [Web log].
'   Retrieved from http://yoursumbuddy.com/using-worksheet-codenames-in-other-workbooks/
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function GetSheetFromCodeName(wb As Workbook, CodeName As String) As Excel.Worksheet

    Dim wsCN As Excel.Worksheet

    If Not Debugger Then On Error Resume Next Else On Error GoTo 0

    For Each wsCN In wb.Worksheets

        If wsCN.CodeName = CodeName Then
            Set GetSheetFromCodeName = wsCN
            Exit For
         End If
    Next wsCN

End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' NavigateSheets (Public Sub)
'
' |strStartSheetCodename| = [String] Name of worksheet to navigate from.
' |strEndSheetCodename| = [String] Name of worksheet to naviage to.
'
'This sub streamlines the user experience by showing only one worksheet at a time.  When the user clicks the
'   commandbutton to move to the next sheet, the previous one closes.
'
'Instead of referencing the sheets' public name, this sub references the sheets' codename.
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub NavigateSheets(strStartSheetCodename As String, strEndSheetCodename As String)

    Dim wsStart As Excel.Worksheet  'Stores starting worksheet
    Dim wsEnd As Excel.Worksheet    'Stores ending worksheet

    If Not Debugger Then On Error Resume Next Else On Error GoTo 0

    'Calls the GetSheetFromCodeName function
    Set wsStart = GetSheetFromCodeName(Workbooks("TaskHelper VBA iSeries.xlsm"), strStartSheetCodename)
    Set wsEnd = GetSheetFromCodeName(Workbooks("TaskHelper VBA iSeries.xlsm"), strEndSheetCodename)

    wsEnd.Visible = xlSheetVisible
    wsEnd.Activate

    wsStart.Visible = xlSheetHidden

End Sub


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' ChangeLocks (Public Sub)
'
'Accepts an array of userform textboxes.  Locks or unlocks as needed.
'
'The color variables are dimensioned as variant so as to allow for different
'   formatting options.
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub ChangeLocks(passArray() As Object, passBoolean As Boolean, changeover As Integer)

    Dim oppositeBoolean As Boolean
    Dim i As Integer
    Dim var_Selected_Color As Variant
    Dim var_Opposite_Color As Variant

    oppositeBoolean = Not passBoolean

    'Determines color selection based on passed bool value
    If passBoolean = True Then
        var_Selected_Color = cWhite
        var_Opposite_Color = cGrey
    Else:
        var_Selected_Color = cGrey
        var_Opposite_Color = cWhite
    End If

    For i = LBound(passArray) To UBound(passArray)

        If i < changeover Then
    
            'Unlocks if passed bool is true; locks if false
            passArray(i).Locked = oppositeBoolean
            passArray(i).BackColor = var_Selected_Color
            'PassArray(i) = vbNullString    'Necessary? [...]
    
        Else:

            'Locks if passed bool is true; unlocks if false
            passArray(i).Locked = passBoolean
            passArray(i).BackColor = var_Opposite_Color
            'PassArray(i) = vbNullString    'Necessary? [...]

        End If

    Next i

End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' PassProgramTextboxes (Public Sub)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub PassProgramTextboxes(ByRef passArray() As Object, ByVal RegForm As MSForms.UserForm)
    Set passArray(0) = RegForm.ProgramNumber_Textbox
    Set passArray(1) = RegForm.ProgramTuition_Textbox
    Set passArray(2) = RegForm.ClassMod1_Textbox
    Set passArray(3) = RegForm.ClassMod2_Textbox
    Set passArray(4) = RegForm.ClassMod3_Textbox
    Set passArray(5) = RegForm.ClassMod4_Textbox
    Set passArray(6) = RegForm.ClassMod5_Textbox
    Set passArray(7) = RegForm.ClassMod6_Textbox
    Set passArray(8) = RegForm.ClassMod7_Textbox
    Set passArray(9) = RegForm.ClassTuition1_Textbox
    Set passArray(10) = RegForm.ClassTuition2_Textbox
    Set passArray(11) = RegForm.ClassTuition3_Textbox
    Set passArr(12) = RegForm.ClassTuition4_Textbox
    Set passArr(13) = RegForm.ClassTuition5_Textbox
    Set passArr(14) = RegForm.ClassTuition6_Textbox
    Set passArr(15) = RegForm.ClassTuition7_Textbox
End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' PassStudentTextboxes (Public Sub)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub PassStudentTextboxes(ByRef passArr() As Object, ByVal RegForm As MSForms.UserForm)
    Set passArr(0) = RegForm.StudentID_Textbox
    Set passArr(1) = RegForm.Areacode_Textbox
    Set passArr(2) = RegForm.Phonenumber_Textbox
    Set passArr(3) = RegForm.Email_Textbox
    Set passArr(4) = RegForm.AddressLine1_Textbox
    Set passArr(5) = RegForm.AddressLine2_Textbox
    Set passArr(6) = RegForm.AddressLine3_Textbox
    Set passArr(7) = RegForm.AddressLine4_Textbox
    Set passArr(8) = RegForm.City_Textbox
    Set passArr(9) = RegForm.StateAbbrev_Textbox
    Set passArr(10) = RegForm.Zipcode_Textbox
End Sub


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' LoadUserformObjects (Public Sub)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub LoadUserformObjects(ByRef StudentFile As cStudentFile, ByVal RegForm As MSForms.UserForm, ByRef Exception As cException)

    Exception.Push "Environment.LoadUserformObjects"
    
    'Pass error handling up the call stack
    On Error GoTo 0

    'Pass userform
    Set StudentFile.UserFormObject = RegForm
    
    'Pass and set error handling
    Set StudentFile.AutomationComboBox = RegForm.Automation_ComboBox
    
    'Pass objects
    Set StudentFile.FirstNameTextbox = RegForm.Firstname_Textbox
    Set StudentFile.MiddleNameTextbox = RegForm.Middlename_Textbox
    Set StudentFile.LastNameTextbox = RegForm.Lastname_Textbox
    Set StudentFile.SalespersonTextbox = RegForm.Salesperson_Textbox
    Set StudentFile.StudentIDTextbox = RegForm.StudentID_Textbox
    Set StudentFile.AreaCodeTextbox = RegForm.Areacode_Textbox
    Set StudentFile.PhoneNumberTextbox = RegForm.Phonenumber_Textbox
    Set StudentFile.EmailTextbox = RegForm.Email_Textbox
    Set StudentFile.AddressLine1Textbox = RegForm.AddressLine1_Textbox
    Set StudentFile.AddressLine2Textbox = RegForm.AddressLine2_Textbox
    Set StudentFile.AddressLine3Textbox = RegForm.AddressLine3_Textbox
    Set StudentFile.AddressLine4Textbox = RegForm.AddressLine4_Textbox
    Set StudentFile.CityTextbox = RegForm.City_Textbox
    Set StudentFile.StateTextbox = RegForm.StateAbbrev_Textbox
    Set StudentFile.ZipCodeTextbox = RegForm.Zipcode_Textbox
    Set StudentFile.ProgramNumberTextbox = RegForm.ProgramNumber_Textbox
    Set StudentFile.ProgramTuitionTextbox = RegForm.ProgramTuition_Textbox
    Set StudentFile.ClassMod1Textbox = RegForm.ClassMod1_Textbox
    Set StudentFile.ClassMod2Textbox = RegForm.ClassMod2_Textbox
    Set StudentFile.ClassMod3Textbox = RegForm.ClassMod3_Textbox
    Set StudentFile.ClassMod4Textbox = RegForm.ClassMod4_Textbox
    Set StudentFile.ClassMod5Textbox = RegForm.ClassMod5_Textbox
    Set StudentFile.ClassMod6Textbox = RegForm.ClassMod6_Textbox
    Set StudentFile.ClassMod7Textbox = RegForm.ClassMod7_Textbox
    Set StudentFile.ClassTuition1Textbox = RegForm.ClassTuition1_Textbox
    Set StudentFile.ClassTuition2Textbox = RegForm.ClassTuition2_Textbox
    Set StudentFile.ClassTuition3Textbox = RegForm.ClassTuition3_Textbox
    Set StudentFile.ClassTuition4Textbox = RegForm.ClassTuition4_Textbox
    Set StudentFile.ClassTuition5Textbox = RegForm.ClassTuition5_Textbox
    Set StudentFile.ClassTuition6Textbox = RegForm.ClassTuition6_Textbox
    Set StudentFile.ClassTuition7Textbox = RegForm.ClassTuition7_Textbox
    Set StudentFile.ParentInvoiceTextbox = RegForm.ParentInvoice_Textbox
    Set StudentFile.StudentTuitionTextbox = RegForm.StudentTuition_Textbox
    Set StudentFile.StudentFeesTextbox = RegForm.StudentFees_Textbox
    Set StudentFile.StudentInvoiceTextbox = RegForm.StudentInvoice_Textbox
    Set StudentFile.DownPayTextbox = RegForm.EnterDownPay_Textbox
    Set StudentFile.NumberOfMonthsTextbox = RegForm.EnterNumOfMonths_Textbox
    Set StudentFile.DollarPerMonthTextbox = RegForm.EnterDollarPerMonth_Textbox
    Set StudentFile.SessionComboBox = RegForm.Session_ComboBox
    Set StudentFile.ParentNumberComboBox = RegForm.ParentNumber_ComboBox
    Set StudentFile.PrefixCodeComboBox = RegForm.PrefixCode_ComboBox
    Set StudentFile.ProofHSCheckbox = RegForm.ProofHS_Checkbox
    Set StudentFile.ParentStatusOptionButton = RegForm.WithParent_Optionselect
    Set StudentFile.StudentStatusOptionButton = RegForm.ReturnStudent_Optionselect
    Set StudentFile.MaleOptionButton = RegForm.Male_Optionselect
    Set StudentFile.FemaleOptionButton = RegForm.Female_Optionselect
    Set StudentFile.CalcByDollarPerMonthOptionButton = RegForm.CalcByDollarPerMonth_Optionselect
    Set StudentFile.IndividualCreditsOptionButton = RegForm.IndividualCredits_Optionselect
    Set StudentFile.CareerProgramOptionButton = RegForm.CareerProgram_Optionselect
    Set StudentFile.CollegeSemesterOptionButton = RegForm.CollegeSemester_Optionselect
    Set StudentFile.CalcByNumOfMonthsOptionButton = RegForm.CalcByNumOfMonths_Optionselect
    Set StudentFile.PayInFullOptionButton = RegForm.PayInFull_Optionselect
    Set StudentFile.NoCostOptionButton = RegForm.NoCost_Optionselect
    
Cleanup:

    Exception.Pop
    
End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' DetermineTable (Public Function)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function DetermineTable(ByVal StudentFile As cStudentFile, ByVal wSheet As Excel.Worksheet, ByVal Exception As cException) As Excel.ListObject

    Dim StandardLength As Integer
    StandardLength = 8
    
    'Used for component testing only
    Dim TestFlag As Boolean
    TestFlag = True
    
    'Pass error handling up the call stack
    On Error GoTo 0
    
    Exception.Push "Environment.DetermineTable"
    
    If StudentFile.GetStudentStatus = True Then
        StudentFile.AddressBookListingExists = True
    End If
    If Len(Trim(StudentFile.GetProgramNumber)) = StandardLength Then
        StudentFile.FullProgramFlag = True
    End If
    
    If TestFlag = True Then
        Set DetermineTable = wSheet.ListObjects("TestCommandList")
    ElseIf StudentFile.AddressBookListingExists = False And StudentFile.GetParentStatus = False Then
        'Set DetermineTable = wSheet.AddressBookNoParent
    ElseIf StudentFile.AddressBookListingExists = False And StudentFile.GetParentStatus = True Then
        'Set DetermineTable = wSheet.AddressBookWithParent
    ElseIf StudentFile.AddressBookListingExists = True And StudentFile.FullProgramFlag = False Then
        'Set DetermineTable = wSheet.RegistrationIndividualCredits
    ElseIf StudentFile.AddressBookListingExists = True And StudentFile.FullProgramFlag = True Then
        'Set DetermineTable = wSheet.RegistrationFullProgram
    Else
        Set DetermineTable = wSheet.Range("TestCommandList")
        Exception.ErrFlag = True
        Exception.Message = Exception.Message & vbNewLine & vbNewLine & "* The correct command list table has failed to load  " & _
            vbNewLine & "If resetting the userform fails to resolve the issue, please contact your VBA support team."
    End If
    
Cleanup:
    Exception.Pop
End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' LoadCommands (Public Sub)
'Expected name of table columns: Action | Item | Row | Col | Len
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub LoadCommands(ByRef Command As cCommand, ByRef CommandList As Collection, ByVal CommandTable As Excel.ListObject, ByRef Exception As cException)

    Dim lRow As Excel.ListRow
    
    Exception.Push "Environment.LoadCommands"
    
    'Pass error handling up the call stack
    On Error GoTo 0

    For Each lRow In CommandTable.ListRows
        Set Command = New cCommand
        Command.Action = Trim(CommandTable.ListColumns("Action"))
        Command.Item = Trim(CommandTable.ListColumns("Item"))
        Command.Row = Val(CommandTable.ListColumns("Row").DataBodyRange)
        Command.Column = CommandTable.ListColumns("Column")
        Command.Length = CommandTable.ListColumns("Length")
        CommandList.Add Command
    Next lRow

Cleanup:
    Exception.Pop
End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' LoadAS400 (Public Sub)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub LoadAS400(ByRef AS400 As cAS400, ByVal StudentFile As cStudentFile, ByRef Exception As cException)

    'Pass error handling up the call stack
    On Error GoTo 0
    
    Exception.Push "Environment.LoadAS400"
    
    AS400.SessionName = StudentFile.GetSession
    
    Exception.Push "Core_Registration.InitializeAS400"
        InitializeAS400 AS400
    Exception.Pop

Cleanup:
    Exception.Pop
End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' ApproveRegistration (Public Function)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function ApproveRegistration(ByVal StudentFile As cStudentFile, ByVal AS400 As cAS400, ByVal Exception As cException) As Boolean

    'Pass error handling up the call stack
    On Error GoTo 0
    
    Exception.Push "Environment.ApproveRegistration"

    ApproveRegistration = True
    If Exception.ErrFlag = True Then
        ApproveRegistration = False
        MsgBox "One or more errors have occurred that prevent the script from proceeding:" & vbNewLine & vbNewLine & _
            Err.Description & vbNewLine & vbNewLine & Exception.Message
    End If
    
    'if red message on studentfile
    'else bluemessage on studentfile
    
    'if red message on as400
    'else bluemessage on as400

Cleanup:
    Exception.Pop
End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' AbortRegistration (Public Function)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function AbortRegistration(ByVal AS400 As cAS400, ByRef StopEachScreen As Boolean, ByRef Exception As cException) As Boolean
    
    'Pass error handling up the call stack
    On Error GoTo 0
    
    Exception.Push "Environment.AbortRegistration"
    
    Dim str As String
    str = "Please confirm the current screen, then select an option below." & vbNewLine & vbNewLine & _
            vbTab & "Press YES to continue to the next screen." & vbNewLine & _
            vbTab & "Press NO to turn off the confirmation messages." & vbNewLine & _
            vbTab & "Press CANCEL to abort the registration."
    
    Select Case MsgBox(str, vbYesNoCancel, "StopEach / Debug")
    
        Case vbYes
            AbortRegistration = False
            
        Case vbNo
            StopEachScreen = False
            AbortRegistration = False
        
        Case vbCancel
            AbortRegistration = True
        
        Case Else
            AbortRegistration = False
            
    End Select
    
    Exception.Pop

End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' ExecuteSendCommand (Public Sub)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub ExecuteSendCommand(ByVal Command As cCommand, ByVal AS400 As cAS400, ByRef Exception As cException)

    'Pass error handling up the call stack
    On Error GoTo 0
    
    Exception.Push "Environment.ExecuteSendCommand"

    AS400.Presentation.SendKeys (Command.Item)
    
    Exception.Pop
    
End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' SearchHasFailed (Public Function)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function SearchHasFailed(ByVal Command As cCommand, ByVal AS400 As cAS400, ByRef Exception As cException) As Boolean

    'Pass error handling up the call stack
    On Error GoTo 0
    
    Exception.Push "Environment.SearchHasFailed"
    
    Dim KeyString As String
    Dim lRow As Long
    Dim lCol As Long
    Dim Forward As Long

    KeyString = Trim(Command.Item)
    lRow = Command.Row
    lCol = Command.Column
    Forward = 1
    
    SearchHasFailed = False
    'If AS400.Presentation.SearchText(KeyString, Forward, lRow, lCol) = True Then
    
    Exception.Pop

End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' ExecuteGetCommand (Public Sub)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub ExecuteGetCommand(ByVal Command As cCommand, ByVal AS400 As cAS400, ByRef StudentFile As cStudentFile, ByRef Exception As cException)

    'Pass error handling up the call stack
    On Error GoTo 0
    
    Exception.Push "Environment.ExecuteGetCommand"

    Dim KeyString As String
    Dim ExtractText As String
    Dim lRow As Long
    Dim lCol As Long
    Dim lLen As Long
    
    KeyString = Trim(Command.Item)
    lRow = Command.Row
    lCol = Command.Column
    lLen = Command.Length
    
    ExtractText = AS400.Presentation.GetText(lRow, lCol, lLen)
    
    Select Case KeyString
        'Empty
    End Select

    Exception.Pop
    
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' ExecuteSetCommand (Public Sub)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub ExecuteSetCommand(ByVal Command As cCommand, ByVal AS400 As cAS400, ByVal StudentFile As cStudentFile, ByRef Exception As cException)

    'Pass error handling up the call stack
    On Error GoTo 0
    
    Exception.Push "Environment.ExecuteSetCommand"
    
    Dim Char As String
    Dim KeyString As String
    Dim lRow As Long
    Dim lCol As Long
    
    KeyString = Trim(Command.Item)
    Char = Left(KeyString, 1)
    lRow = Command.Row
    lCol = Command.Column
    
    If Not Char = "#" Then
    
        AS400.Presentation.SetText KeyString, lRow, lCol
    
    Else
    
        Select Case KeyString
        
            Case "#MailingName"
                AS400.Presentation.SetText StudentFile.GetMiddleName, lRow, lCol
            Case "#AlphaName"
                AS400.Presentation.SetText StudentFile.GetAlphaName, lRow, lCol
            Case "#AreaCode"
                AS400.Presentation.SetText StudentFile.GetAreaCode, lRow, lCol
            Case "#PhoneNum"
                AS400.Presentation.SetText StudentFile.GetPhoneNumber, lRow, lCol
            Case "#AddressLN1"
                AS400.Presentation.SetText StudentFile.GetAddressLine1, lRow, lCol
            Case "#AddressLN2"
                AS400.Presentation.SetText StudentFile.GetAddressLine2, lRow, lCol
            Case "#AddressLN3"
                AS400.Presentation.SetText StudentFile.GetAddressLine3, lRow, lCol
            Case "#AddressLN4"
                AS400.Presentation.SetText StudentFile.GetAddressLine4, lRow, lCol
            Case "#ZipCode"
                AS400.Presentation.SetText StudentFile.GetZipCode, lRow, lCol
            Case "#City"
                AS400.Presentation.SetText StudentFile.GetCity, lRow, lCol
            Case "#State"
                AS400.Presentation.SetText StudentFile.GetState, lRow, lCol
            Case "#StudentID"
                AS400.Presentation.SetText StudentFile.StudentID, lRow, lCol
            Case "#PrefixCode"
                AS400.Presentation.SetText StudentFile.GetPrefixCode, lRow, lCol
            Case "#SchoolCode"
                AS400.Presentation.SetText StudentFile.GetSchoolCode, lRow, lCol
            Case "#DegreeCode"
                AS400.Presentation.SetText StudentFile.GetDegreeCode, lRow, lCol
            Case "#ProofHS"
                AS400.Presentation.SetText StudentFile.GetProofHS, lRow, lCol
            Case "#Gender"
                AS400.Presentation.SetText StudentFile.GetGender, lRow, lCol
            Case "#Email"
                AS400.Presentation.SetText StudentFile.GetEmail, lRow, lCol
            Case "#ParentNum"
                AS400.Presentation.SetText StudentFile.GetParentNumber, lRow, lCol
            Case "#SalesPerson"
                AS400.Presentation.SetText StudentFile.GetSalesperson, lRow, lCol
            Case "#ClassMod1"
                AS400.Presentation.SetText StudentFile.GetClassMod1, lRow, lCol
            Case "#ClassMod2"
                AS400.Presentation.SetText StudentFile.GetClassMod2, lRow, lCol
            Case "#ClassMod3"
                AS400.Presentation.SetText StudentFile.GetClassMod3, lRow, lCol
            Case "#ClassMod4"
                AS400.Presentation.SetText StudentFile.GetClassMod4, lRow, lCol
            Case "#ClassMod5"
                AS400.Presentation.SetText StudentFile.GetClassMod5, lRow, lCol
            Case "#ClassMod6"
                AS400.Presentation.SetText StudentFile.GetClassMod6, lRow, lCol
            Case "#ClassMod7"
                AS400.Presentation.SetText StudentFile.GetClassMod7, lRow, lCol
            Case "#ClassTuition1"
                AS400.Presentation.SetText StudentFile.GetClassTuition1, lRow, lCol
            Case "#ClassTuition2"
                AS400.Presentation.SetText StudentFile.GetClassTuition2, lRow, lCol
            Case "#ClassTuition3"
                AS400.Presentation.SetText StudentFile.GetClassTuition3, lRow, lCol
            Case "#ClassTuition4"
                AS400.Presentation.SetText StudentFile.GetClassTuition4, lRow, lCol
            Case "#ClassTuition5"
                AS400.Presentation.SetText StudentFile.GetClassTuition5, lRow, lCol
            Case "#ClassTuition6"
                AS400.Presentation.SetText StudentFile.GetClassTuition6, lRow, lCol
            Case "#ClassTuition7"
                AS400.Presentation.SetText StudentFile.GetClassTuition7, lRow, lCol
            'Case "#"
                'AS400.Presentation.SetText StudentFile., lRow, lCol XXXXXXXX
                
        End Select
    End If

    Exception.Pop
End Sub

Public Sub ExecuteHomeCommand(ByVal AS400 As cAS400, ByRef Exception As cException)


End Sub

Public Sub AdjustTableVariables(ByVal Command As cCommand, ByVal AS400 As cAS400, ByVal StudentFile As cStudentFile, ByRef Exception As cException)


End Sub
