''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' ExecuteCommands (Module)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Option Explicit

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Execute
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub Execute(ByVal Commands As Collection, ByRef Student As cStudent, _
    ByVal AS400 As cAS400, Optional ByRef Exception As cException, _
    Optional ByVal countdown As Integer = 0, Optional ByRef StatusBox As Object)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Loops through each Command in the Commands Collection _
    and executes each action
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    If Not Exception Is Nothing Then Exception.Push "ExecuteCommands.Execute"
    
    If DebugFlag Then On Error GoTo 0 Else On Error GoTo CommandError
    
    If countdown <= 0 Then countdown = Commands.Count
    If Not Exception Is Nothing Then Exception.ErrMessage = " ... ... Commands to Execute: " & _
                        CStr(countdown)
    
    Dim Command As cCommand
    For Each Command In Commands
        
        If Not Exception Is Nothing Then Exception.ErrMessage = " ... ... Execution: " & _
                        Command.Perform & "; Commands left to perform: " & CStr(countdown)
        
        Select Case Command.Perform
        
            'Perform .SetText (no variable pointer)
            Case commSet

                PerformSetText_NoVariable Command, AS400, Exception
                
            'Perform .SetText (with variable pointer)
            Case variableSet

                PerformSetText_WithVariable Command, Student, AS400, Exception

            'Perform .GetText
            Case commGet

                PerformGetText Command, Student, AS400, Exception
            
            'Perform .SearchText
            Case commSearch

                If SearchResult(Command, AS400, Exception) = False Then
                    If Not Exception Is Nothing Then
                        Exception.ErrMessage = "'" & Command.StringToAction & "' has not been found."
                    End If
                    GoTo SearchHasFailed
                End If
            
            'Perform .SendKeys
            Case commSend

                PerformSendKeys Command, AS400, Exception
            
            'Call a custom environment procedure
            Case commCustom
                
                HardCodedProcedure Command, Student, Exception
            
            'Command not found
            Case Else
            
                If Not Exception Is Nothing Then Exception.ErrMessage = "Command not found"
                
                ' // Perform no action
                    
        End Select
        
        'If a countdown and status object has been passed in _
            from the parent procedure...
        If countdown > 0 Then
        
            countdown = countdown - 1
            
            If Not StatusBox Is Nothing Then
                StatusBox.Value = "...   ...   ...   " & "Actions Left: " & _
                        CStr(countdown) & "   ...   ...   ..."
            End If
            
        End If
        
    Next Command

'''''''''''''''''''''''''''
' Cleanup
'''''''''''''''''''''''''''
Cleanup:

    If Not Exception Is Nothing Then Exception.Pop

Exit Sub

'''''''''''''''''''''''''''
' Error Handling
'''''''''''''''''''''''''''
CommandError:

    If Not Exception Is Nothing Then
        With Exception
            .ErrNumber = Err.Number
            .ErrDescription = Err.Description
            .ErrMessage = "The AS/400 has failed during the main execution procedure"
            .Flag = True
        End With
    End If
    
Resume Cleanup
'''''''''''''''''''''''''''
SearchHasFailed:

    If Not Exception Is Nothing Then
        With Exception
            .Flag = True
        End With
    End If

GoTo Cleanup
'''''''''''''''''''''''''''
End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' PerformSetText_NoVariable
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub PerformSetText_NoVariable(ByVal Command As cCommand, ByVal AS400 As cAS400, _
    Optional ByRef Exception As cException)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' For the main execution cycle; performs the AS400's _
    .SetText action (with no special logic required)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    On Error GoTo 0
    
    If Not Exception Is Nothing Then Exception.Push "ExecuteCommands.PerformSetText_NoVariable"

    AS400.SetText Command.StringToAction, Command.RowToAction, Command.ColumnToAction
    
    If Not Exception Is Nothing Then Exception.Pop

End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' PerformSetText_WithVariable
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub PerformSetText_WithVariable(ByVal Command As cCommand, ByRef Student As cStudent, _
    ByVal AS400 As cAS400, Optional ByRef Exception As cException)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' For the main execution cycle; performs the AS400's _
    .SetText action, but requires a hard-coded environment _
    reference to pull the necessary information from a variable
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    On Error GoTo 0
    
    If Not Exception Is Nothing Then Exception.Push "ExecuteCommands.PerformSetText_WithVariable"
    
    Dim setString As String
    setString = ReturnStringToSet(Command, Student, Exception)
    
    AS400.SetText setString, Command.RowToAction, Command.ColumnToAction
    
    If Not Exception Is Nothing Then Exception.Pop
    
End Sub

Private Sub PerformGetText(ByVal Command As cCommand, ByRef Student As cStudent, _
    ByVal AS400 As cAS400, Optional ByRef Exception As cException)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' For the main execution cycle; performs the AS400's _
    .GetText action, but requires a hard-coded environment _
    reference to save the information to the necessary variable
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    On Error GoTo 0
    
    If Not Exception Is Nothing Then Exception.Push "ExecuteCommands.PerformGetText"
    
    Dim container As String
    container = AS400.GetText(Command.RowToAction, Command.ColumnToAction, Command.LengthToAction)
    
    SaveToLocation container, Command, Student, Exception
    
    If Not Exception Is Nothing Then Exception.Pop
    
End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' SearchResult
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Function SearchResult(ByVal Command As cCommand, ByVal AS400 As cAS400, _
    Optional ByRef Exception As cException) As Boolean
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' For the main execution cycle; performs the AS400's _
    .SearchText action.
' The execution cycle assumes it must end if this procedure _
    returns False.
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    On Error GoTo 0
    
    If Not Exception Is Nothing Then Exception.Push "ExecuteCommands.SearchResult"
    
    Dim searchDirection As Long
    
    If Not Val(Command.ExtraValue) = forward Or Not Val(Command.ExtraValue) = reverse Then
        searchDirection = forward
    Else
        searchDirection = Command.ExtraValue
    End If

    SearchResult = AS400.SearchText(Command.StringToAction, Command.RowToAction, Command.ColumnToAction, searchDirection)
    
    If Not Exception Is Nothing Then Exception.Pop
    
End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' PerformSendKeys
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub PerformSendKeys(ByVal Command As cCommand, ByVal AS400 As cAS400, _
    Optional ByRef Exception As cException)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' For the main execution cycle; performs the AS400's _
    .SendKeys action
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    On Error GoTo 0
    
    If Not Exception Is Nothing Then Exception.Push "ExecuteCommands.PerformSendKeys"
    
    AS400.SendKeys Command.StringToAction, Command.RowToAction, Command.ColumnToAction
    AS400.Pause
    
    If Not Exception Is Nothing Then Exception.Pop

End Sub

