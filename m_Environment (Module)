''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' m_Environment (Module)
'
' Procedures for the interpretation of data for use within the m_General module
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Option Explicit

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub RunStudentSearch()



End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' LoadUserformObjects (Public Sub)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub LoadUserformObjects(ByRef StudentFile As cStudentFile, ByVal RegForm As MSForms.UserForm, ByRef Exception As cException)

    'Pass error handling up the call stack
    On Error GoTo 0

    Exception.Push "[m_Environment.LoadUserformObjects]"

    'Pass userform
    Set StudentFile.UserFormObject = RegForm

    'Pass textboxes
    Set StudentFile.SalespersonTextbox = RegForm.Salesperson_Textbox
    Set StudentFile.ParentCodeTextBox = RegForm.ParentCode_Textbox
    Set StudentFile.FirstNameTextbox = RegForm.Firstname_Textbox
    Set StudentFile.LastNameTextbox = RegForm.Lastname_Textbox
    Set StudentFile.MiddleNameTextbox = RegForm.Middlename_Textbox
    Set StudentFile.WebStartTimeTextbox = RegForm.WebStartTime_Textbox
    Set StudentFile.WebEndTimeTextbox = RegForm.WebEndTime_Textbox
    Set StudentFile.ProgramNumberTextbox = RegForm.ProgramNumber_Textbox
    Set StudentFile.ProgramTuitionTextbox = RegForm.ProgramTuition_Textbox
    Set StudentFile.EmailTextbox = RegForm.Email_Textbox
    Set StudentFile.PONumberTextbox = RegForm.PONumber_Textbox
    Set StudentFile.LongNumberTextbox = RegForm.LongNumber_Textbox
    Set StudentFile.AreaCodeTextbox = RegForm.AreaCode_Textbox
    Set StudentFile.PhoneNumberTextbox = RegForm.PhoneNumber_Textbox
    
    'Pass comboboxes
    Set StudentFile.SessionComboBox = RegForm.Session_ComboBox
    Set StudentFile.PrefixCodeTextbox = RegForm.PrefixCode_Textbox
    Set StudentFile.AutomationComboBox = RegForm.Automation_ComboBox
    
    'Pass option selection
    Set StudentFile.MaleOptionButton = RegForm.Male_Optionselect
    Set StudentFile.FemaleOptionButton = RegForm.Female_Optionselect
    
    Exception.Pop

End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' ApproveRegistration (Public Function)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function ApproveRegistration(ByVal StudentFile As cStudentFile, ByVal AS400 As cAS400, _
    ByVal Exception As cException, ByRef RedMessage As String, ByRef BlueMessage As String) As Boolean

    'Pass error handling up the call stack
    On Error GoTo 0
    
    Exception.Push "[m_Environment.ApproveRegistration]"
    
    Dim ApprovalFlag As Boolean
    ApprovalFlag = True
    
    Dim UserSelection As Integer
    UserSelection = 2
    
    If Exception.ErrFlag = True Then
        ApprovalFlag = False
    End If
    
    ConfirmAccountInfo StudentFile, ApprovalFlag, RedMessage, BlueMessage, Exception
    ConfirmStudentFile StudentFile, ApprovalFlag, RedMessage, BlueMessage, Exception
    
    If ApprovalFlag = False Then
        MsgBox RedMessage, vbCritical, "Pre-Enrollment Checklist"
    Else
        UserSelection = MsgBox(BlueMessage, vbOKCancel, "Pre-Enrollment Checklist")
        If UserSelection = vbOK Then ApprovalFlag = True
        If UserSelection = vbCancel Then ApprovalFlag = False
    End If
    
    ApproveRegistration = ApprovalFlag
    Exception.Pop

End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' ConfirmAccountInfo
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub ConfirmAccountInfo(ByVal StudentFile As cStudentFile, ByRef ApprovalFlag As Boolean, _
    ByRef RedMessage As String, ByRef BlueMessage As String, ByRef Exception As cException)
    
    'Pass error handling up the call stack
    On Error GoTo 0
    
    Exception.Push "[m_Environment.ConfirmAccountInfo]"
    
    Dim Temp As String
    
    'Automation setting
    Temp = vbNullString
    Temp = StudentFile.GetAutomation
    If Temp = "Fast" Or Temp = "Slow" Or Temp = "StopEach" Or Temp = "Debug" Then
        BlueMessage = BlueMessage & "Automation:" & vbTab & Temp & vbNewLine
    ElseIf Temp = "Test" Or Temp = "test" Then
        BlueMessage = BlueMessage & "Automation:" & vbTab & "UNIT TEST MODE" & vbNewLine
    Else
        BlueMessage = BlueMessage & "Automation:" & vbTab & "Automation set to 'Default'" & vbNewLine
    End If
    
    'AS/400 Session
    Temp = vbNullString
    Temp = StudentFile.GetSession
    If Len(Temp) = 1 And InStr("ABCDEFGHIJKLMNOPQRSTUVWXYZ", Temp) >= 1 Then
        BlueMessage = BlueMessage & "Session:" & vbTab & vbTab & Temp & vbNewLine & vbNewLine
    Else
        ApprovalFlag = False
        RedMessage = RedMessage & "* The AS/400 session name must be a single letter" & vbNewLine
    End If
    
    'PrefixCode
    Temp = vbNullString
    Temp = StudentFile.GetPrefixCode
    If Len(Temp) = 3 Then
        BlueMessage = BlueMessage & "PrefixCode:" & vbTab & Temp & vbNewLine
    Else
        ApprovalFlag = False
        RedMessage = RedMessage & "* The prefix code must be 3 characters long" & vbNewLine
    End If
    
    'Program Number
    Temp = vbNullString
    Temp = StudentFile.GetProgramNumber
    If IsNumeric(Temp) And Len(Temp) = 8 Then
        BlueMessage = BlueMessage & "Program Number:" & vbTab & Temp & vbNewLine
    Else
        ApprovalFlag = False
        RedMessage = RedMessage & "* The program number must be numeric and 8 digits long" & vbNewLine
    End If
    
    'Program Tuition
    Temp = vbNullString
    Temp = StudentFile.GetProgramTuition
    If IsNumeric(Temp) And Val(Temp) >= 1 Then
        BlueMessage = BlueMessage & "Program Tuition:" & vbTab & Format(Temp, "Currency") & vbNewLine & vbNewLine
    Else
        ApprovalFlag = False
        RedMessage = RedMessage & "* The program tuition must be numeric and greater than zero" & vbNewLine
    End If
    
    'Web Start Time
    Temp = vbNullString
    Temp = StudentFile.GetWebStartTime
    If IsNumeric(Temp) And Len(Temp) <= 6 Then
        BlueMessage = BlueMessage & "WebStartTime:" & vbTab & Temp & vbNewLine
    Else
        BlueMessage = BlueMessage & "WebStartTime:" & vbTab & "000000" & vbNewLine
    End If
    
    'Web End Time
    Temp = vbNullString
    Temp = StudentFile.GetWebEndTime
    If IsNumeric(Temp) And Len(Temp) <= 6 Then
        BlueMessage = BlueMessage & "WebEndTime:" & vbTab & Temp & vbNewLine & vbNewLine
    Else
        BlueMessage = BlueMessage & "WebEndTime:" & vbTab & "000000" & vbNewLine
    End If
    
    Exception.Pop
    
    If Len(StudentFile.GetPONumber) >= 1 Then
        BlueMessage = BlueMessage & "PO Number:" & vbTab & StudentFile.GetPONumber & vbNewLine & vbNewLine
    End If
    
End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' ConfirmStudentFile
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub ConfirmStudentFile(ByVal StudentFile As cStudentFile, ByRef ApprovalFlag As Boolean, _
    ByRef RedMessage As String, ByRef BlueMessage As String, ByRef Exception As cException)

    'Pass error handling up the call stack
    On Error GoTo 0
    
    Exception.Push "[m_Environment.ConfirmStudentFile]"
    
    'Student Name
    If Len(StudentFile.GetMailingName) < 4 Or Len(StudentFile.GetMailingName) > 38 Then
        ApprovalFlag = False
        RedMessage = RedMessage & "* The student's full name must be between 4 and 38 characters" & vbNewLine
    Else
        BlueMessage = BlueMessage & "MailingName:" & vbTab & StudentFile.GetMailingName & vbNewLine
        BlueMessage = BlueMessage & "AlphaName:" & vbTab & StudentFile.GetAlphaName & vbNewLine
    End If
    
    BlueMessage = BlueMessage & "Gender:" & vbTab & vbTab & StudentFile.GetGender & vbNewLine
    
    'Phone Number
    BlueMessage = BlueMessage & "Phone:" & vbTab & vbTab & StudentFile.GetAreaCode & "-" & StudentFile.GetPhoneNumber & vbNewLine
        
    'Student Email
    BlueMessage = BlueMessage & "Email:" & vbTab & vbTab & StudentFile.GetEmail & vbNewLine & vbNewLine
    
    'Long Number
    BlueMessage = BlueMessage & "Long#:" & vbTab & vbTab & StudentFile.GetLongNumber & vbNewLine
    
    'PO Number
    BlueMessage = BlueMessage & "PO#:" & vbTab & vbTab & StudentFile.GetPONumber & vbNewLine
    
    Exception.Pop
    
End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' ProceedToNextScreen (Public Function)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Function ProceedToNextScreen(ByVal Action As String, ByVal AS400 As cAS400, ByRef Exception As cException) As Boolean

    'Pass error handling up the call stack
    On Error GoTo 0
    
    Exception.Push "[m_Environment.ProceedToNextScreen]"
    
    Dim Selection As Integer
    
    WaitForReady AS400, Exception
    ProceedToNextScreen = False
    If AS400.Handling = "StopEach" Then
        AppActivate "Microsoft Excel"
        Selection = MsgBox("OK:" & vbTab & "Proceed to next screen" & vbNewLine & _
            "Cancel:" & vbTab & "Stop the automation", vbOKCancel, "StopEach / Debug")
        If Selection = vbCancel Then
            ProceedToNextScreen = True
            AS400.Metrics.Active = True
        Else
            ProceedToNextScreen = False
            AS400.Metrics.Active = True
            AS400.Presentation.SendKeys Action
            WaitForReady AS400, Exception
        End If
    Else
        AS400.Metrics.Active = True
        AS400.Presentation.SendKeys Action
        WaitForReady AS400, Exception
    End If
    
    Exception.Pop
    
End Function
