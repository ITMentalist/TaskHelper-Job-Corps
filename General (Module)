''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' General (Module)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Provides a series of public procedures for use across multiple applications
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Option Explicit

'Set to True to turn off error handling
    Public Const DebugFlag As Boolean = True

'AS/400 modular values
    Public Entry As String
    Public Row As Long
    Public Col As Long
    Public Length As Long
    
'Line text container
    Public GetTextString As String

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' RestrictToPositiveWholeNumbers (Public Sub)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub RestrictToPostiveWholeNumbers(KeyAscii As MSForms.ReturnInteger)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Restricts the textbox to accept only whole numbers
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Select Case KeyAscii
     Case Asc("0") To Asc("9")
     Case Else
         KeyAscii = 0
 End Select

End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' RestrictToPostiveFloatNumbers (Public Sub)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub RestrictToPostiveFloatNumbers(KeyAscii As MSForms.ReturnInteger, str_textbox As String)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'Restricts the textbox to accept only integers and floats
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Select Case KeyAscii
     Case Asc("0") To Asc("9")
     Case Asc(".")
         If InStr(1, str_textbox, ".") > 0 Then
             KeyAscii = 0
         End If
     Case Else
         KeyAscii = 0
 End Select

End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' TurnOffExcelDefaults (Public Sub)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub TurnOffExcelDefaults(Optional ByRef Exception As cException)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Turns off certain Excel settings to improve the overall processing speed
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

    'Pass error handling up the call stack
    On Error GoTo 0

    If Not Exception Is Nothing Then Exception.Push "General.TurnOffExcelDefaults"

    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.Calculation = xlCalculationManual
    
Cleanup:
    
    If Not Exception Is Nothing Then Exception.Pop
    
End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' TurnOnExcelDefaults (Public Sub)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub TurnOnExcelDefaults(Optional ByRef Exception As cException)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Returns the Excel settings to their default values
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

    'Pass error handling up the call stack
    On Error GoTo 0

    If Not Exception Is Nothing Then Exception.Push "General.TurnOnExcelDefaults"
    
    Application.Calculation = xlCalculationAutomatic
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    
Cleanup:
    
    If Not Exception Is Nothing Then Exception.Pop
    
End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' InitializeApp (Public Sub)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub InitializeApp(ByRef AS400 As cAS400, ByVal SessionLetter As String, _
    Optional ByRef Exception As cException)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Purpose:      Connects VBA to the AS/400

' Input:        The custom AS400 class object _
                The AS/400's session name as a single string value _
                (Optional) The custom Exception class object _

' Output:       The modified AS400 class object _
                (Optional) The modified Exception class object _

' Assumptions:  The custom AS400 class object works w/o error _
                The session name is a valid entry _

' AS/400 required:  Yes

' Handles Errors:   No
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    'Passes error handling up the call stack
    On Error GoTo 0
    
    If Not Exception Is Nothing Then Exception.Push "General.InitializeApp"

    AS400.Name = Trim(SessionLetter)
    
    If Not Exception Is Nothing Then Exception.Message = "Setting containers to the PCOMM objects..."
    Set AS400.Session = CreateObject("PCOMM.autECLSession")
    Set AS400.Metrics = CreateObject("PCOMM.autECLWinMetrics")
    Set AS400.Connection = CreateObject("PCOMM.autECLConnList")
    
    If Not Exception Is Nothing Then Exception.Message = "Setting object to the connection name..."
    AS400.Session.SetConnectionByName (AS400.Name)
    AS400.Metrics.SetConnectionByName (AS400.Name)
    
    'Refreshing the connection list is not required, but the IBM documentation recommends it
    If Not Exception Is Nothing Then Exception.Message = "Refreshing the connection list..."
    AS400.Refresh
    
Cleanup:

    If Not Exception Is Nothing Then Exception.Message = vbNullString
    If Not Exception Is Nothing Then Exception.Pop

End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Pause (Public Sub)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub Pause(ByVal AS400 As cAS400, Optional ByRef Exception As cException)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Purpose:      Prevents VBA from overrunning the AS/400

' Input:        The custom AS400 class object _
                (Optional) The custom Exception class object _

' Output:       (Optional) The modified Exception class object _

' Assumptions:  The class objects are valid _
                The AS/400 is connected _

' AS/400 required:  Yes

' Handles Errors:   No
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    'Passes error handling up the call stack
    On Error GoTo 0

    If Not Exception Is Nothing Then Exception.Push "General.Pause"

    AS400.Wait 10
    AS400.WaitForApp
    AS400.Wait AS400.Time

Cleanup:

    If Not Exception Is Nothing Then Exception.Pop

End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' NavigateHome
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub NavigateHome(ByVal AS400 As cAS400, Optional ByRef Exception As cException)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Purpose:      Navigates the AS/400's presentation space _
                    to the agency's home screen. _

' Input:        The custom AS400 class object _
                (Optional) The custom Exception class object _

' Output:       Procedural actions _

' Assumptions:  The class objects are valid _
                The AS/400 is connected _
                No changes are made to the AS/400 that would cause this _
                    procedure to "run off the rails" _

' AS/400 required:  Yes

' Handles Errors:   No
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    'Passes error handling up the call stack
    On Error GoTo 0
    
    If Not Exception Is Nothing Then Exception.Push "General.NavigateHome"
    
    '''''''''''''''''''''''''''
    ' General variables
    '''''''''''''''''''''''''''
    Dim i As Integer: i = 0
    Const MaxAttempts As Integer = 5

    Const TagLength As Long = 8
    Const TagRow As Long = 1
    Const TagCol As Long = 2
    
    Const MenuRow As Long = 19
    Const MenuCol As Long = 7
    
    Const HomeTag As String = " BNIMAIN"
    
    'AS/400 modular values
    Entry = vbNullString
    Row = 0
    Col = 0
    Length = 0
    
    GetTextString = vbNullString
    
    '''''''''''''''''''''''''''
    ' General Settings
    '''''''''''''''''''''''''''
    AS400.Time = 25
    
    '''''''''''''''''''''''''''
    ' Navigation Loop
    '''''''''''''''''''''''''''
    'Note: Assumes that "F3" will correctly back out of most screens. _
        The select case should focus on overcoming the F12 "traps", as well _
        as those times where, if not accounted for, multiple F3 presses would _
        trip the MaxAttempts flag.
    Do
    
        Pause AS400, Exception
        
        GetTextString = "": Row = TagRow: Col = TagCol: Length = TagLength
        GetTextString = AS400.GetText(Row, Col, Length)
        
        If Not Exception Is Nothing Then Exception.Message = _
            "Nav Loop: Iteration (" & i & "), Case (" & GetTextString & ")"
    
        Select Case GetTextString
        
            'PS: BNIMAIN (Destination)
            Case Is = HomeTag
                'Note: Certain screens have a "pop-up" screen _
                    that must be F3'd out of as well
                AS400.SendKeys "[pf3]"
                Exit Do
                
            'PS: BNICS
            Case " BNICS  "
                AS400.SendKeys "[pf12]"
                Exit Do
                
            'PS: 66300
            Case " 66300  "
                AS400.SendKeys ("[pf3]")
                
            'PS: 66340
            Case " 66340  "
                AS400.SendKeys ("[pf3]")
                
            'PS: Student Service Inquiry (1.14.)
            Case "603131_B"
                AS400.SendKeys "[pf3]"
            
            'Address Book Information
            Case "01051   "
                AS400.SendKeys ("[pf3]")
                
            'PS: (1.14.), Customer Ledger Inquiry
            Case " 032002 "
                AS400.SendKeys ("[pf3]")

            'PS: (1.14.), ICS Cancellation Maintenance
            Case "631001  "
                AS400.SendKeys ("[pf3]")
                
            'PS: (1.14.), Student Supplemental
            Case "60110   "
                AS400.SendKeys ("[pf3]")

            'PS: (1.14.), Student Course Master
            Case "60210   "
                AS400.SendKeys ("[pf3]")
                
            Case "60211   "
                AS400.SendKeys ("[pf3]")
                AS400.SendKeys ("[pf3]")

            'PS: (1.14.), Shipping Screen
            Case "42045   "
                AS400.SendKeys ("[pf3]")

            'PS: ICS Accounting Main Menu
            Case " ICSACCT"
                AS400.SendKeys ("[pf12]")

            'PS: Main Menu
            Case "ICSMAIN "
                Pause AS400, Exception
                AS400.SetText "6", 20, 7
                AS400.SendKeys ("[Enter]")

            'Library List Selection
            Case " 98VL   "
                Pause AS400, Exception
                AS400.SetText "1", 6, 10
                AS400.SendKeys ("[Enter]")

            'Product File Maintenance
            Case " BNIPROD"
                AS400.SendKeys ("[pf12]")
                
            'Note Maintenance
            Case " 55192  "
                AS400.SendKeys ("[pf3]")
                
            'Education Screen
            Case " 55192  "
                AS400.SendKeys ("[pf3]")
                
            'Name Search
            Case "603132_B"
                AS400.SendKeys ("[pf3]")
                
            Case "631001  "
                AS400.SendKeys ("[pf3]")
                AS400.SendKeys ("[pf3]")
                
            Case " BNISOP "
                AS400.SendKeys ("[pf12]")
                AS400.SendKeys ("[pf12]")
                
            Case " 42040  "
                AS400.SendKeys ("[pf3]")
                AS400.SendKeys ("[pf12]")
                AS400.SendKeys ("[pf12]")
                
            'Empty
            Case "          "
            
                Entry = vbNullString: Row = 1: Col = 32: Length = 10
                GetTextString = AS400.GetText(Row, Col, Length)
                
                    Select Case GetTextString
                    
                        'Exit
                        Case "       Exi"
                            AS400.SendKeys "[Enter]"
                        
                        'Sign-on Information
                        Case "ign-on Inf"
                            AS400.SendKeys "[Enter]"
                            AS400.SendKeys "[Enter]"
                            
                        'Display Program Messages
                        Case "lay Progra"
                            AS400.SendKeys "[Enter]"
                            AS400.SendKeys "[Enter]"
                        
                        'Display Messages (Standard screen)
                        Case " Display M"
                            AS400.SendKeys "[Enter]"
                            
                        'Sign On"
                        Case "    Sign O"
                            MsgBox "Please sign into the AS/400 before proceeding", _
                                vbInformation, "Sign-In required"
                            Exit Do
                        
                        'MSM screens
                        Case "          "
                            MsgBox "Please ensure the AS/400 is signed into the current environment " & _
                                "before proceeding", vbInformation, "Incorrect AS/400 location"
                            Exit Do
                            
                    End Select
                
            Case Else
            
                AS400.SendKeys ("[pf3]")
                AS400.SendKeys ("[pf12]")

        End Select
        
        'loop counter
        i = i + 1
    
    Loop While i <= MaxAttempts
    
'''''''''''''''''''''''''''
'Cleanup
'''''''''''''''''''''''''''
Cleanup:

    Pause AS400, Exception
    If Not Exception Is Nothing Then Exception.Message = vbNullString
    If Not Exception Is Nothing Then Exception.Pop

End Sub
