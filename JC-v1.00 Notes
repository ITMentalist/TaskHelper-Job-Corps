ITEM LIST

Salesperson_Textbox
PrefixCode_Textbox
ParentCode_Textbox
Firstname_Textbox
Lastname_Textbox
Middlename_Textbox

AlphaName_Textbox
ActionL1_Textbox
ActionL2_Textbox
ActionL3_Textbox
ActionL4_Textbox
Action5L_Textbox
ActionL6_Textbox
ActionL7_Textbox
ActionL8_Textbox
MailingNameL1_Textbox
MailingNameL2_Textbox
MailingNameL3_Textbox
MailingNameL4_Textbox
MailingNameL5_Textbox
MailingNameL6_Textbox
MailingNameL7_Textbox
MailingNameL8_Textbox
ShowPhoneL1_Textbox
ShowPhoneL2_Textbox
ShowPhoneL3_Textbox
ShowPhoneL4_Textbox
ShowPhoneL5_Textbox
ShowPhoneL6_Textbox
ShowPhoneL7_Textbox
ShowPhoneL8_Textbox

WebStartTime_Textbox
WebEndTime_Textbox
ProgramNumber_Textbox
ProgramTuition_Textbox

Areacode_Textbox
Phonenumber_Textbox
Email_Textbox

Male_Optionselect
Female_Optionselect

Automation_ComboBox
Session_ComboBox

StudentSearch_Button
RunAutomation_Button
Confirm_Button
Clear_Button
Cancel_Button


SID_Textbox
Session_ComboBox
Status_Textbox
Class1_Checkbox
Class2_Checkbox
Class3_Checkbox
Class4_Checkbox
Class5_Checkbox
Class6_Checkbox
Class7_Checkbox
Class8_Checkbox
Class9_Checkbox
Class10_Checkbox
Class11_Checkbox
Class12_Checkbox
Class13_Checkbox
Class14_Checkbox
Class15_Checkbox
Class16_Checkbox
Class17_Checkbox
Class18_Checkbox
Class19_Checkbox
Class20_Checkbox
Class21_Checkbox
Class22_Checkbox
Class23_Checkbox
Class24_Checkbox
Class25_Checkbox
Class26_Checkbox
Class27_Checkbox
Class28_Checkbox
Mod1_Textbox
Mod2_Textbox
Mod3_Textbox
Mod4_Textbox
Mod5_Textbox
Mod6_Textbox
Mod7_Textbox
Mod8_Textbox
Mod9_Textbox
Mod10_Textbox
Mod11_Textbox
Mod12_Textbox
Mod13_Textbox
Mod14_Textbox
Mod15_Textbox
Mod16_Textbox
Mod17_Textbox
Mod18_Textbox
Mod19_Textbox
Mod20_Textbox
Mod21_Textbox
Mod22_Textbox
Mod23_Textbox
Mod24_Textbox
Mod25_Textbox
Mod26_Textbox
Mod27_Textbox
Mod28_Textbox
Title1_Textbox
Title2_Textbox
Title3_Textbox
Title4_Textbox
Title5_Textbox
Title6_Textbox
Title7_Textbox
Title8_Textbox
Title9_Textbox
Title10_Textbox
Title11_Textbox
Title12_Textbox
Title13_Textbox
Title14_Textbox
Title15_Textbox
Title16_Textbox
Title17_Textbox
Title18_Textbox
Title19_Textbox
Title20_Textbox
Title21_Textbox
Title22_Textbox
Title23_Textbox
Title24_Textbox
Title25_Textbox
Title26_Textbox
Title27_Textbox
Title28_Textbox

PopulateClasses_Button
ApplyTransferCredits_Button
Clear_Button
Cancel_Button

'============================================================================
' *** Registration_Main (Module)
'
' Automates class registration within the B2B Military/Enrichment Environment
'============================================================================

Option Explicit

Public Function Register_into_the_AddressBook(objAS400 As Object, obj_AS400_Focus As Object, _
        Stu As cStudent, ByRef tag As cTag, reg As cRegistration, _
        ws As Excel.Worksheet, long_row As Long) As String

'"""
'   Accepts the cStudent and cTag class modules _
    This script accesses the AS/400's Automation Objects and runs through _
        the steps required to perform a student's registeration _
        within the B2B Environment _
    The output to Word is (hopefully) performed should the script be _
        critically interrupted

' Assumes the required AS/400 session is ready and active
' Assumes the data stored within the class module arguments are valid values
'
' For a brief review of the AS/400's Automation Objects, visit the _
        Master_Documentation module
'"""

'Note: The AS/400 will only accept variable numbers as long
Dim str_Message As String
Dim Milliseconds As Long
Dim bool_error As Boolean

'Determines length of padding in milliseconds for the wait procedure
If tag.Activity = True Then Milliseconds = 150 Else Milliseconds = 75

'Error Handling
bool_error = False
str_Message = "Warning: The script has completed, but with possible errors. " & _
    "Please confirm the new Address Book entry is correct before attempting to proceed" & _
    vbNewLine & vbNewLine & "Debug Log:" & vbNewLine & vbNewLine

tag.StudentID = vbNullString

'/// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// ///
' REGISTRATION, GATE 01:
'
' Naviages the AS/400 to the correct presentation space (PS) and inputs
'       the initial information
'/// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// ///

If Not Debugger Then On Error GoTo Pre_Enrollment_Error Else On Error GoTo 0

If tag.Activity = True Then obj_AS400_Focus.Active = True

'Runs maze loop to reach the "BNIMAIN" PS
Call WaitForReady(objAS400, Milliseconds)
If Nav_To_Home_Screen(objAS400) = False Then GoTo Pre_Enrollment_Fail

'Proceeds to the "BNICS" PS
Call WaitForReady(objAS400, Milliseconds)
objAS400.autECLPS.SetText "1", 19, 7
objAS400.autECLPS.SendKeys ("[Enter]")
Call WaitForReady(objAS400, Milliseconds)

'Enrollment path determined by parent status
If tag.ParentStatus = True Then

    'With Parent
    objAS400.autECLPS.SetText "3", 19, 7
    objAS400.autECLPS.SendKeys ("[Enter]")
    Call WaitForReady(objAS400, Milliseconds)

Else

    'No Parent
    objAS400.autECLPS.SetText "23", 19, 7
    objAS400.autECLPS.SendKeys ("[Enter]")
    Call WaitForReady(objAS400, Milliseconds)
    
End If

' Depending on the path, the Nav_To_Home_Screen function can sometimes
'   cause the above commands to not execute properly, probably due to
'   the respective "wait" commands doing a poor job of doing so.
' Re-performing the function and subsequent commands will clear this issue.

If Not objAS400.autECLPS.SearchText("01051", 1, 1, 2) Then

    Call WaitForReady(objAS400, Milliseconds)
    Call Nav_To_Home_Screen(objAS400)
    
    Call WaitForReady(objAS400, Milliseconds)
    objAS400.autECLPS.SetText "1", 19, 7
    objAS400.autECLPS.SendKeys ("[Enter]")
    
    Call WaitForReady(objAS400, Milliseconds)
    If tag.ParentStatus = True Then
        objAS400.autECLPS.SetText "3", 19, 7
        objAS400.autECLPS.SendKeys ("[Enter]")
        Call WaitForReady(objAS400, Milliseconds)
    Else
        objAS400.autECLPS.SetText "23", 19, 7
        objAS400.autECLPS.SendKeys ("[Enter]")
        Call WaitForReady(objAS400, Milliseconds)
    End If
End If

Call PassToDataSheet(True, "AddressBookNavigate", ws, long_row)

'Enters the initial student information
If tag.ParentStatus = True Then

    'With Parent
    objAS400.autECLPS.SetText "A", 3, 19              'Action Code
    objAS400.autECLPS.SetText Stu.MailingName, 4, 19  'First name, Mid Name, Last Name
    objAS400.autECLPS.SetText Stu.AlphaName, 6, 19    'Last Name, First Name, Mid/Suffix
    objAS400.autECLPS.SetText Stu.Address0, 8, 19     'Address Line 0
    objAS400.autECLPS.SetText Stu.Address1, 9, 19     'Address Line 1
    objAS400.autECLPS.SetText Stu.Address2, 10, 19    'Address Line 2
    objAS400.autECLPS.SetText Stu.Address3, 11, 19    'Address Line 3
    objAS400.autECLPS.SetText Stu.ZipCode, 12, 19     'Zip Code
    objAS400.autECLPS.SetText Stu.City, 12, 55        'City
    objAS400.autECLPS.SetText Stu.State, 13, 55       'State
    objAS400.autECLPS.SetText "TR", 14, 19            'Required Entry
    objAS400.autECLPS.SetText tag.ParentLC, 17, 55    'Parent LC#
    objAS400.autECLPS.SetText tag.B2BPrefix, 23, 19   'B2B Prefix Code
    Call WaitForReady(objAS400, Milliseconds)
    
Else

    'No Parent
    objAS400.autECLPS.SetText "A", 4, 19              'Action Code
    objAS400.autECLPS.SetText Stu.AlphaName, 7, 19    'Last Name, First Name, Mid/Suffix
    objAS400.autECLPS.SetText "TR", 7, 77             'Required Entry
    objAS400.autECLPS.SetText Stu.PhoneArea, 9, 19    'Area Code
    objAS400.autECLPS.SetText Stu.PhoneBase, 9, 26    'Main Phone Number
    objAS400.autECLPS.SetText Stu.MailingName, 12, 19 'First name, Mid Name, Last Name
    objAS400.autECLPS.SetText Stu.Address0, 14, 19    'Address Line 0
    objAS400.autECLPS.SetText Stu.Address1, 15, 19    'Address Line 1
    objAS400.autECLPS.SetText Stu.Address2, 16, 19    'Address Line 2
    objAS400.autECLPS.SetText Stu.Address3, 17, 19    'Address Line 3
    objAS400.autECLPS.SetText Stu.ZipCode, 18, 19     'Zip Code
    objAS400.autECLPS.SetText Stu.City, 18, 55        'City
    objAS400.autECLPS.SetText Stu.State, 19, 55       'State
    Call WaitForReady(objAS400, Milliseconds)
End If

Call PassToDataSheet(True, "Gate01", ws, long_row)

'/// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// ///
' REGISTRATION, GATE 2 ***REGISTRATION***:
'
' This third step in the registration process receives the Student ID#,
'       then performs the [Enter]-[F3] sequence
'
' Note: *** Entering Gate 2 is a POINT OF NO RETURN (with regards to enrollment)
'       Improper enrollments from this point forward can only be deleted by the
'       IT Department's AS400 administrator.  Also, if mistakes are made by the
'       script, there is no guarantee the user would have either the access or
'       the knowledge to correct it.
'/// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// ///

If Not Debugger Then On Error GoTo Error_Gate02 Else On Error GoTo 0

Call WaitForReady(objAS400, Milliseconds)
objAS400.autECLPS.SendKeys ("[Enter]")

'Receives the Student ID#
Call WaitForReady(objAS400, Milliseconds)
tag.StudentID = objAS400.autECLPS.GetText(4, 32, 8)

Call PassToDataSheet(tag.StudentID, "StudentID", ws, long_row)

If tag.Activity = True Then obj_AS400_Focus.Active = True

'/// /// /// /// ///
' Enter-F3 sequence
'/// /// /// /// ///

If Not Debugger Then On Error GoTo Error_EnterF3 Else On Error GoTo 0

'Enter #1    Text disappears
Call WaitForReady(objAS400, Milliseconds)
objAS400.autECLPS.SendKeys ("[Enter]")

'F3 #1      Proceeds to next PS
Call WaitForReady(objAS400, Milliseconds)
objAS400.autECLPS.SendKeys ("[pf3]")

'Enter #2     Text disappears
Call WaitForReady(objAS400, Milliseconds)
objAS400.autECLPS.SendKeys ("[Enter]")

'F3 #2
Call WaitForReady(objAS400, Milliseconds)
objAS400.autECLPS.SendKeys ("[pf3]")

'Enter #3     Text disappears
Call WaitForReady(objAS400, Milliseconds)
objAS400.autECLPS.SendKeys ("[Enter]")

'F3 #3
Call WaitForReady(objAS400, Milliseconds)
objAS400.autECLPS.SendKeys ("[pf3]")

'Enter #4     Text will "red bar"
Call WaitForReady(objAS400, Milliseconds)
objAS400.autECLPS.SendKeys ("[Enter]")

'F3 #4       Proceeds to next PS
Call WaitForReady(objAS400, Milliseconds)
objAS400.autECLPS.SendKeys ("[pf3]")

Call PassToDataSheet(True, "Gate02", ws, long_row)

'/// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// ///
' REGISTRATION, GATE 3
'
' This fourth step enters the account-related details
'/// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// ///

If Not Debugger Then On Error GoTo Error_Gate03 Else On Error GoTo 0

'Note: For non-parent accounts, the B2B Prefix Code needs to be entered
Call WaitForReady(objAS400, Milliseconds)
If tag.ParentStatus = False Then objAS400.autECLPS.SetText tag.B2BPrefix, 9, 23
Call WaitForReady(objAS400, Milliseconds)

'Enter #5     Text disappears
Call WaitForReady(objAS400, Milliseconds)
objAS400.autECLPS.SendKeys ("[Enter]")

'F3 #5       Proceeds to next PS
Call WaitForReady(objAS400, Milliseconds)
objAS400.autECLPS.SendKeys ("[pf3]")

Call WaitForReady(objAS400, Milliseconds)
objAS400.autECLPS.SetText tag.SchoolCode, 6, 23       'Enters the School Type
objAS400.autECLPS.SetText tag.DegreeCode, 10, 23      'Enters the Degree Student Code
objAS400.autECLPS.SetText Stu.ProofHS, 14, 57         'Enters the Proof of HS
objAS400.autECLPS.SetText Stu.Gender, 19, 57          'Enters the Gender
Call WaitForReady(objAS400, Milliseconds)

'Enter      Text disappears
Call WaitForReady(objAS400, Milliseconds)
objAS400.autECLPS.SendKeys ("[Enter]")

'F3         Proceeds to next PS
Call WaitForReady(objAS400, Milliseconds)
objAS400.autECLPS.SendKeys ("[pf3]")

Call PassToDataSheet(True, "Gate03", ws, long_row)

'/// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// ///
' REGISTRATION, GATE 4
'
' This fifth step enters the contact information
'/// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// ///

If Not Debugger Then On Error GoTo Error_Gate04 Else On Error GoTo 0

Call WaitForReady(objAS400, Milliseconds)
If tag.ParentStatus = True Then

    'Enter is repeated to ensure the script continues
    Call WaitForReady(objAS400, Milliseconds)
    objAS400.autECLPS.SendKeys ("[Enter]")
    Call WaitForReady(objAS400, Milliseconds)
    objAS400.autECLPS.SendKeys ("[Enter]")
    
    'Enter Phone Number
    Call WaitForReady(objAS400, Milliseconds)
    objAS400.autECLPS.SendKeys ("[pf12]")
    
    Call WaitForReady(objAS400, Milliseconds)
    objAS400.autECLPS.SetText "C", 4, 21              'Enters Action Code
    objAS400.autECLPS.SetText CStr(Stu.PhoneArea), 11, 9    'Area Code
    objAS400.autECLPS.SetText CStr(Stu.PhoneBase), 11, 16   'Main Phone Number
    Call WaitForReady(objAS400, Milliseconds)
    
    objAS400.autECLPS.SendKeys ("[Enter]")
    Call WaitForReady(objAS400, Milliseconds)
    objAS400.autECLPS.SendKeys ("[pf3]")

Else
    Call WaitForReady(objAS400, Milliseconds)
    objAS400.autECLPS.SetText "I", 4, 19              'Enters Action Code
    Call WaitForReady(objAS400, Milliseconds)
    objAS400.autECLPS.SetText tag.StudentID, 5, 19    'Enters SID
    
    Call WaitForReady(objAS400, Milliseconds)
    objAS400.autECLPS.SendKeys ("[Enter]")
End If

'Proceeds to the email entry
Call WaitForReady(objAS400, Milliseconds)
objAS400.autECLPS.SendKeys ("[pf5]")

Call WaitForReady(objAS400, Milliseconds)
objAS400.autECLPS.SendKeys ("[pf4]")
Call WaitForReady(objAS400, Milliseconds)
objAS400.autECLPS.SetText "C", 3, 18              'Enters Action Code
objAS400.autECLPS.SetText "E", 11, 62              'Required entry
objAS400.autECLPS.SetText Stu.Email, 10, 4
Call WaitForReady(objAS400, Milliseconds)

Call WaitForReady(objAS400, Milliseconds)
objAS400.autECLPS.SendKeys ("[Enter]")

Call WaitForReady(objAS400, Milliseconds)
objAS400.autECLPS.SendKeys ("[pf3]")

Call WaitForReady(objAS400, Milliseconds)
objAS400.autECLPS.SendKeys ("[pf3]")


Call PassToDataSheet(False, "Gate04", ws, long_row)

Cleanup:

If bool_error = True Then

    'Message indicating possible errors
    str_Message = str_Message & vbNewLine & vbNewLine & _
                "DO YOU WISH TO CONTINUE?"

Else

    'Message indicating successful completion (overwrites)
    str_Message = "A Student ID# has been generated successfully." & _
                vbNewLine & vbNewLine & tag.StudentID & vbNewLine & vbNewLine & _
                "DO YOU WISH TO CONTINUE?"

End If

Register_into_the_AddressBook = str_Message

Exit Function

'//////////////
'ERROR HANDLERS
'//////////////

Pre_Enrollment_Error:
bool_error = True
tag.StudentID = "X"
str_Message = "Error - The script has failed to reach the registration screen." & vbNewLine & vbNewLine & _
    "Please navigate to a B2B Home Screen before trying again"
Resume Cleanup

Pre_Enrollment_Fail:
bool_error = True
tag.StudentID = "X"
str_Message = "Failure - The script has failed to reach the registration screen." & vbNewLine & vbNewLine & _
    "Please navigate to a B2B Home Screen before trying again"
GoTo Cleanup

Error_Gate02:
str_Message = str_Message & "Error - Gate 02" & vbNewLine
bool_error = True
Resume Next

Error_EnterF3:
str_Message = str_Message & "Error - Enter/F3 sequence" & vbNewLine
bool_error = True
Resume Next

Error_Gate03:
str_Message = str_Message & "Error - Gate 03" & vbNewLine
bool_error = True
Resume Next

Error_Gate04:
str_Message = str_Message & "Error - Gate 04" & vbNewLine
bool_error = True
Resume Next

End Function

Public Sub Register_into_the_Classes(objAS400 As Object, obj_AS400_Focus As Object, _
        Stu As cStudent, reg As cRegistration, tag As cTag, _
        ws As Excel.Worksheet, long_row As Long)

'"""
' Accepts the cRegistration and cTag class modules
' This script accesses the AS/400's Automation Objects and runs through
'       the steps required to perform a student's registeration
'       within the B2B Environment
' The output to Word is (hopefully) performed should the script be
'       critically interrupted
'
' Assumes the required AS/400 session is ready and active
' Assumes the data stored within the class module arguments are valid values
'
' For a brief review of the AS/400's Automation Objects, visit the
'       Master_Documentation module
'"""

'Note: The AS/400 will only accept variable numbers as long
Dim strGetText As String
Dim i As Byte
Dim str_Message As String
Dim Milliseconds As Long
Dim bool_error As Boolean

'Determines length of padding in milliseconds for the wait procedure
If tag.Activity = True Then Milliseconds = 300 Else Milliseconds = 75

str_Message = "Warning: An error has occurred and the script has stopped at this location:" & _
    vbNewLine & vbNewLine
strGetText = vbNullString
bool_error = False
long_row = 0
i = 0

'/// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// ///
' REGISTRATION, GATE 5
'
' The fifth step in the enrollment process navigates the AS/400 to the
'       correct Presentation Space (PS)
'/// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// ///

If Not Debugger Then On Error GoTo Error_Gate05 Else On Error GoTo 0

If tag.Activity = True Then obj_AS400_Focus.Active = True

'Runs maze loop to reach the "BNIMAIN" PS
Call WaitForReady(objAS400, Milliseconds)
If Nav_To_Home_Screen(objAS400) = False Then GoTo MazePathFail

If tag.EnrollmentType = 3 Then

    'Proceeds to the PS for Individual Credits
    Call WaitForReady(objAS400, Milliseconds)
    objAS400.autECLPS.SetText "17", 19, 7
    objAS400.autECLPS.SendKeys ("[Enter]")
    
Else

    'Proceeds to the PS for full programs
    Call WaitForReady(objAS400, Milliseconds)
    objAS400.autECLPS.SetText "20", 19, 7
    objAS400.autECLPS.SendKeys ("[Enter]")

End If

Call PassToDataSheet(True, "Gate05", ws, long_row)

'/// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// ///
' REGISTRATION, GATE 6A & 6B
'
' The sixth step in the enrollment process enters the class information &
'   Payment information.
'
' Note: This script assumes the payment information is valid input.  Valid input
'       should be handled by the previous userform and support modules.
'
' A >> Individual College Credits
' B >> Full Program/Semester
'/// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// ///

If Not Debugger Then On Error GoTo Error_Gate06 Else On Error GoTo 0

'////////////////////////////////////////////
' ///////////////////////////////////////////
' Gate 6A1
' ///////////////////////////////////////////
'////////////////////////////////////////////

If tag.EnrollmentType = 3 Then
'Individual College Credits

    long_row = 12
    Call PassToDataSheet("A", "G06Path", ws, long_row)

    'Enters Account Information
    Call WaitForReady(objAS400, Milliseconds)
    objAS400.autECLPS.SetText "A", 2, 20              'Enters Action Code
    objAS400.autECLPS.SetText tag.StudentID, 3, 20    'Enters SID
    objAS400.autECLPS.SetText CStr(tag.SalesPerson), 5, 20  'Enters Salesperson code
    objAS400.autECLPS.SetText "99999999", 6, 20       'Program ID# for Individual Credits
    objAS400.autECLPS.SetText "-", 6, 29              'Name for Individual Credits
    If tag.ParentStatus = False Then objAS400.autECLPS.SetText CStr(tag.StudentID), 4, 20
    
    Call WaitForReady(objAS400, Milliseconds)
    objAS400.autECLPS.SendKeys ("[Enter]")
    
    'A brand new account contains an extra pop-up
    Call WaitForReady(objAS400, Milliseconds)
    strGetText = objAS400.autECLPS.GetText(7, 32, 5)
    Call WaitForReady(objAS400, Milliseconds)
    If strGetText = "66302" Then objAS400.autECLPS.SendKeys ("[Enter]")
    
    Do
    '"""
    '// If a student has been previously enrolled in individual credits, then
    '   the previous classes are listed here. Repeats PageDown until blank pages
    '   are reached, or until five pages have been checked //
    
        Call WaitForReady(objAS400, Milliseconds)
        strGetText = objAS400.autECLPS.GetText(11, 19, 3)
    
        If Not strGetText = "   " Then
        
            Call WaitForReady(objAS400, Milliseconds)
            objAS400.autECLPS.SendKeys ("[pagedn]")
            
        End If
        
        'Loop Counter
        If i > 4 Then GoTo Loop_Cap
        i = i + 1
        
    Loop Until strGetText = "   "
    
    strGetText = vbNullString
    
    Call WaitForReady(objAS400, Milliseconds)
    objAS400.autECLPS.SetText CStr(reg.ModCode0), 11, 19
    objAS400.autECLPS.SetText CStr(reg.ModCode1), 12, 19
    objAS400.autECLPS.SetText CStr(reg.ModCode2), 13, 19
    objAS400.autECLPS.SetText CStr(reg.ModCode3), 14, 19
    objAS400.autECLPS.SetText CStr(reg.ModCode4), 15, 19
    objAS400.autECLPS.SetText CStr(reg.ModCode5), 16, 19
    objAS400.autECLPS.SetText CStr(reg.ModCode6), 17, 19
    Call WaitForReady(objAS400, Milliseconds)
    objAS400.autECLPS.SetText CStr(reg.ClassTuition0), 11, 64
    objAS400.autECLPS.SetText CStr(reg.ClassTuition1), 12, 64
    objAS400.autECLPS.SetText CStr(reg.ClassTuition2), 13, 64
    objAS400.autECLPS.SetText CStr(reg.ClassTuition3), 14, 64
    objAS400.autECLPS.SetText CStr(reg.ClassTuition4), 15, 64
    objAS400.autECLPS.SetText CStr(reg.ClassTuition5), 16, 64
    objAS400.autECLPS.SetText CStr(reg.ClassTuition6), 17, 64
    
    Call WaitForReady(objAS400, Milliseconds)
    objAS400.autECLPS.SendKeys ("[Enter]")
    
    'If the "No Cost" option is selected, skip to final registration
    If reg.PaymentType = 4 Then GoTo FinalRegistration  'Located at end of script
        
    Call WaitForReady(objAS400, Milliseconds)
    objAS400.autECLPS.SendKeys ("[Enter]")
    
    Call PassToDataSheet(True, "Gate061", ws, long_row)
    
    ' ///////////////////////////////////////////
    ' Gate 6A2
    ' ///////////////////////////////////////////
    
    If reg.Student_Fees > 0 Or tag.ParentStatus = True Then
    
        Call WaitForReady(objAS400, Milliseconds)
        strGetText = objAS400.autECLPS.GetText(12, 11, 2)
    
        'Determining the necessary row
        If strGetText = "  " Then
            long_row = 12
        Else
            Call WaitForReady(objAS400, Milliseconds)
            strGetText = objAS400.autECLPS.GetText(13, 11, 2)
            If strGetText = "  " Then
                long_row = 13
            Else
                Call WaitForReady(objAS400, Milliseconds)
                strGetText = objAS400.autECLPS.GetText(14, 11, 2)
                If strGetText = "  " Then
                    long_row = 14
                Else
                    GoTo Failure_Gate06A2
                End If
            End If
        End If
    
        strGetText = vbNullString
        
        If tag.ParentStatus = True Then
        'If student is enrolling under a parent account...
        
            Call WaitForReady(objAS400, Milliseconds)
            If reg.Student_Tuition > 0 Then
            'Adds the student's remaining tuition amount
                objAS400.autECLPS.SetText "TR", long_row, 11
                objAS400.autECLPS.SetText "TUI", long_row, 16
                objAS400.autECLPS.SetText CStr(reg.Student_Tuition), long_row, 54
                long_row = long_row + 1
                Call WaitForReady(objAS400, Milliseconds)
            End If
            If reg.Student_Fees > 0 Then
            'Adds the student's additional fee
                objAS400.autECLPS.SetText "TR", long_row, 11
                objAS400.autECLPS.SetText "FEE", long_row, 16
                objAS400.autECLPS.SetText CStr(reg.Student_Fees), long_row, 54
                Call WaitForReady(objAS400, Milliseconds)
            End If
        
        Else
        'For standard enrollments...
        
            Call WaitForReady(objAS400, Milliseconds)
            objAS400.autECLPS.SetText "TR", long_row, 11
            objAS400.autECLPS.SetText "FEE", long_row, 16
            objAS400.autECLPS.SetText CStr(reg.Student_Fees), long_row, 54
            Call WaitForReady(objAS400, Milliseconds)
            
        End If
    
    'No "Else" for the master If/Then Statement... script simply continues
    End If
    
    Call WaitForReady(objAS400, Milliseconds)
    objAS400.autECLPS.SendKeys ("[Enter]")
    
    Call PassToDataSheet(True, "Gate062", ws, long_row)
    
    ' ///////////////////////////////////////////
    ' Gate 6A3
    ' ///////////////////////////////////////////
        
    If reg.PaymentType = 1 Then
    'Option to select the monthly payment amount
    
        Call WaitForReady(objAS400, Milliseconds)
        objAS400.autECLPS.SetText "N", 19, 73
        objAS400.autECLPS.SetText CStr(reg.DownPay), 13, 20
        objAS400.autECLPS.SetText CStr(reg.CostPerMonth), 18, 20
    
        Call WaitForReady(objAS400, Milliseconds)
        Call WaitForReady(objAS400, Milliseconds)
        objAS400.autECLPS.SendKeys ("[Enter]")
        Call WaitForReady(objAS400, Milliseconds)
        objAS400.autECLPS.SendKeys ("[Enter]")
        
    ElseIf reg.PaymentType = 2 Then
    'Option to select the number of monthly payments
    
        Call WaitForReady(objAS400, Milliseconds)
        objAS400.autECLPS.SetText "N", 19, 73
        objAS400.autECLPS.SetText CStr(reg.DownPay), 13, 20
        objAS400.autECLPS.SetText CStr(reg.Installments), 17, 20
    
        Call WaitForReady(objAS400, Milliseconds)
        Call WaitForReady(objAS400, Milliseconds)
        objAS400.autECLPS.SendKeys ("[Enter]")
        Call WaitForReady(objAS400, Milliseconds)
        objAS400.autECLPS.SendKeys ("[Enter]")
     
    ElseIf reg.PaymentType = 3 Then
    'Option to select Payment in Full
    
        Call WaitForReady(objAS400, Milliseconds)
        objAS400.autECLPS.SetText "Y", 19, 73
        
        Call WaitForReady(objAS400, Milliseconds)
        objAS400.autECLPS.SendKeys ("[Enter]")
        Call WaitForReady(objAS400, Milliseconds)
        objAS400.autECLPS.SendKeys ("[Enter]")
        
    Else:
    
        GoTo Failure_Gate06A3
        
    End If
    
    Call PassToDataSheet(True, "Gate063", ws, long_row)
    
    ' ///////////////////////////////////////////
    ' Gate 6A4
    ' ///////////////////////////////////////////
        
    Call WaitForReady(objAS400, Milliseconds)
    'Return to previous screen
    objAS400.autECLPS.SendKeys ("[pf3]")
    
    Call WaitForReady(objAS400, Milliseconds)
    strGetText = objAS400.autECLPS.GetText(1, 3, 5)
    
    'If the necessary screen is not reached, then
    '   return again to a previous screen
    If Not strGetText = "66340" Then
    
        Call WaitForReady(objAS400, Milliseconds)
        objAS400.autECLPS.SendKeys ("[pf3]")
        
    'No Else statement... script simply continues
    End If
    
    GoTo FinalRegistration  'Located at end of script
    Call PassToDataSheet(True, "Gate064", ws, long_row)

'////////////////////////////////////////////
' ///////////////////////////////////////////
' Gate 6B1
' ///////////////////////////////////////////
'////////////////////////////////////////////

ElseIf tag.EnrollmentType = 1 Or tag.EnrollmentType = 2 Then
'Full Program

    long_row = 11
    Call PassToDataSheet("B", "G06Path", ws, long_row)

    'Enters Account Information
    Call WaitForReady(objAS400, Milliseconds)
    objAS400.autECLPS.SetText "A", 3, 20              'Enters Action Code
    objAS400.autECLPS.SetText tag.StudentID, 4, 20    'Enters SID
    objAS400.autECLPS.SetText CStr(tag.SalesPerson), 6, 20  'Enters Salesperson code
    objAS400.autECLPS.SetText CStr(reg.FullProgramCode), 7, 20
    If tag.ParentStatus = False Then objAS400.autECLPS.SetText tag.StudentID, 5, 20
    
    Call WaitForReady(objAS400, Milliseconds)
    objAS400.autECLPS.SendKeys ("[Enter]")
    
    'Sometimes there is an extra pop-up
    Call WaitForReady(objAS400, Milliseconds)
    strGetText = objAS400.autECLPS.GetText(7, 32, 5)
    Call WaitForReady(objAS400, Milliseconds)
    If strGetText = "66302" Then objAS400.autECLPS.SendKeys ("[Enter]")
    
    Call PassToDataSheet(True, "Gate061", ws, long_row)
    
    ' ///////////////////////////////////////////
    ' Gate 6B2
    ' ///////////////////////////////////////////
    
    Call WaitForReady(objAS400, Milliseconds)
    If reg.PaymentType = 4 Then GoTo FinalRegistration  'Located at end of script
    
    If tag.ParentStatus = True And reg.Parent_Invoice > 0 Then
    'If student is enrolling under a parent account...
    
        objAS400.autECLPS.SetText "PA", long_row, 11
        objAS400.autECLPS.SetText "TUI", long_row, 16
        objAS400.autECLPS.SetText CStr(reg.Parent_Invoice), long_row, 54
        long_row = long_row + 1
        Call WaitForReady(objAS400, Milliseconds)
    End If
        
    If reg.Student_Tuition > 0 Then
        objAS400.autECLPS.SetText "TR", long_row, 11
        objAS400.autECLPS.SetText "TUI", long_row, 16
        objAS400.autECLPS.SetText CStr(reg.Student_Tuition), long_row, 54
        long_row = long_row + 1
        Call WaitForReady(objAS400, Milliseconds)
    End If
        
    If reg.Student_Fees > 0 Then
        objAS400.autECLPS.SetText "TR", long_row, 11
        objAS400.autECLPS.SetText "FEE", long_row, 16
        objAS400.autECLPS.SetText CStr(reg.Student_Fees), long_row, 54
        Call WaitForReady(objAS400, Milliseconds)
    End If
        
    long_row = 11
    
    Call WaitForReady(objAS400, Milliseconds)
    objAS400.autECLPS.SendKeys ("[Enter]")
    
    Call PassToDataSheet(True, "Gate062", ws, long_row)
        
    ' ///////////////////////////////////////////
    ' Gate 6B3
    '
    'Note: This script assumes that monthly payments
    '   are only ever a TR option, not a PA option
    ' ///////////////////////////////////////////
    
    If reg.PaymentType = 1 Then
    'Option to select the monthly payment amount
    
        Call WaitForReady(objAS400, Milliseconds)
        objAS400.autECLPS.SetText "N", 19, 73
        objAS400.autECLPS.SetText CStr(reg.DownPay), 13, 20
        objAS400.autECLPS.SetText CStr(reg.CostPerMonth), 18, 20
    
        Call WaitForReady(objAS400, Milliseconds)
        objAS400.autECLPS.SendKeys ("[Enter]")
        Call WaitForReady(objAS400, Milliseconds)
        objAS400.autECLPS.SendKeys ("[Enter]")
        
    ElseIf reg.PaymentType = 2 Then
    'Option to select the number of monthly payments
    
        Call WaitForReady(objAS400, Milliseconds)
        objAS400.autECLPS.SetText "N", 19, 73
        objAS400.autECLPS.SetText CStr(reg.DownPay), 13, 20
        objAS400.autECLPS.SetText CStr(reg.Installments), 17, 20
    
        Call WaitForReady(objAS400, Milliseconds)
        objAS400.autECLPS.SendKeys ("[Enter]")
        Call WaitForReady(objAS400, Milliseconds)
        objAS400.autECLPS.SendKeys ("[Enter]")
     
    ElseIf reg.PaymentType = 3 Then
    'Option to select Payment in Full
    
        Call WaitForReady(objAS400, Milliseconds)
        objAS400.autECLPS.SetText "Y", 19, 73
        
        Call WaitForReady(objAS400, Milliseconds)
        objAS400.autECLPS.SendKeys ("[Enter]")
        Call WaitForReady(objAS400, Milliseconds)
        objAS400.autECLPS.SendKeys ("[Enter]")
        
    Else:
    
        GoTo Failure_Gate06B3
        
    End If
    
    Call PassToDataSheet(False, "Gate063", ws, long_row)
    
    ' ///////////////////////////////////////////
    ' Gate 6B4
    ' ///////////////////////////////////////////
        
    Call WaitForReady(objAS400, Milliseconds)
    'Return to previous screen
    objAS400.autECLPS.SendKeys ("[pf3]")
    
    GoTo FinalRegistration  'Located at end of script
    
    Call PassToDataSheet(False, "Gate064", ws, long_row)

End If

'/// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// ///
' REGISTRATION, GATE 7
'
' Final Registration
'/// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// /// ///

FinalRegistration:

If Not Debugger Then On Error Resume Next Else On Error GoTo 0

If reg.PaymentType = 4 Then

    'If the "No Cost" option is selected...
    Call WaitForReady(objAS400, Milliseconds)
    objAS400.autECLPS.SendKeys ("[pf12]")

Else

    'For all other enrollments...
    Call WaitForReady(objAS400, Milliseconds)
    objAS400.autECLPS.SendKeys ("[pf11]")

End If

Call WaitForReady(objAS400, Milliseconds)
Call WaitForReady(objAS400, Milliseconds)

'Navigates to the Student Inquiry PS
objAS400.autECLPS.SendKeys ("[pf3]")
Call WaitForReady(objAS400, Milliseconds)
objAS400.autECLPS.SetText "1", 19, 7
objAS400.autECLPS.SendKeys ("[Enter]")
Call WaitForReady(objAS400, Milliseconds)
objAS400.autECLPS.SetText "14", 19, 7
objAS400.autECLPS.SendKeys ("[Enter]")
Call WaitForReady(objAS400, Milliseconds)
objAS400.autECLPS.SetText tag.StudentID, 3, 13
Call WaitForReady(objAS400, Milliseconds)
objAS400.autECLPS.SendKeys ("[Enter]")

Call PassToDataSheet(True, "Gate07", ws, long_row)

Cleanup:

'Provides a message if an unforeseen error/failure has occurred
If bool_error = True Then
    str_Message = str_Message & vbNewLine & vbNewLine & _
        "This has been caused by an unforeseen error, and it is recommended to proceed manually with the enrollment"
    AppActivate ("Microsoft excel")
    MsgBox str_Message, vbCritical, "Unexpected Error"
End If

Exit Sub

'//////////////
'ERROR HANDLERS
'//////////////

MazePathFail:
str_Message = str_Message & "The script failed to navigate to the correct enrollment screen" & vbNewLine
bool_error = True
GoTo Cleanup

Loop_Cap:
str_Message = str_Message & "The script failed to input the selected class mods" & vbNewLine
bool_error = True
GoTo Cleanup

Error_Gate05:
str_Message = str_Message & "Gate 05 - Navigating the AS/400" & vbNewLine
bool_error = True
Resume Cleanup

Error_Gate06:
str_Message = str_Message & "Gate 06 - Entering the courses and payment summary" & vbNewLine
bool_error = True
Resume Cleanup

Failure_Gate06A2:
str_Message = str_Message & "Gate 06A2 - A failure occured when entering the tuition summary" & vbNewLine
bool_error = True
GoTo Cleanup

Failure_Gate06A3:
str_Message = str_Message & "Gate 06A3 - A failure occured when entering the payment information" & vbNewLine
bool_error = True
GoTo Cleanup

Failure_Gate06B3:
str_Message = str_Message & "Gate 06B3 - A failure occured when entering the payment information" & vbNewLine
bool_error = True
GoTo Cleanup

End Sub








'===========================================================================
' *** Registration_Support (Module)
'
' Contains public subs for use within the Registration Userforms and Modules
'===========================================================================

Option Explicit

Private Sub Load_Data_Into_Stu_Class(ByRef Stu As cStudent, passForm As MSForms.UserForm)

'"""
'Passes values from the userform's textboxes to the cStudent's class properties
'
'Accepts the active userform and the cStudent class variable
'"""

Stu.FirstName = passForm.textbox_Firstname
Stu.LastName = passForm.textbox_Lastname
If Len(Trim(Stu.MidName)) > 0 Then
    Stu.MidName = passForm.textbox_Midname
    Stu.MailingName = Stu.FirstName & Space(1) & Stu.MidName & Space(1) & Stu.LastName
Else
    Stu.MailingName = Stu.FirstName & Space(1) & Stu.LastName
End If

Stu.PhoneArea = passForm.textbox_Phone_Area
Stu.PhoneBase = passForm.textbox_Phone_SevenDigit
Stu.Email = passForm.textbox_Email

Stu.Address0 = passForm.textbox_AddressA
Stu.Address1 = passForm.textbox_AddressB
Stu.Address2 = passForm.textbox_AddressC
Stu.Address3 = passForm.textbox_AddressD
Stu.City = passForm.textbox_City
Stu.State = passForm.textbox_State
Stu.ZipCode = passForm.textbox_Zipcode

If passForm.option_Female = True Then
    Stu.Gender = "F"
ElseIf passForm.option_Male = True Then
    Stu.Gender = "M"
Else
    Stu.Gender = "U"
End If

If passForm.checkbox_ProofHS = True Then
    Stu.ProofHS = "Y"
Else
    Stu.ProofHS = "N"
End If

End Sub

Private Sub Load_Data_Into_Reg_Class(ByRef reg As cRegistration, passForm As MSForms.UserForm)

'"""
'Accepts the active userform and the cRegistration class variable.
'
'Passes values from the userform's textboxes to the cRegistration's class properties.
'
'Assumes Student_Net has already been calculated.
'"""

reg.FullProgramCode = passForm.textbox_ProgramMod
reg.ModCode0 = passForm.textbox_ClassMod0
reg.ModCode1 = passForm.textbox_ClassMod1
reg.ModCode2 = passForm.textbox_ClassMod2
reg.ModCode3 = passForm.textbox_ClassMod3
reg.ModCode4 = passForm.textbox_ClassMod4
reg.ModCode5 = passForm.textbox_ClassMod5
reg.ModCode6 = passForm.textbox_ClassMod6

reg.FullProgramPrice = Val(passForm.textbox_BaseTuition)
reg.ClassTuition0 = Val(passForm.textbox_ClassTuition0)
reg.ClassTuition1 = Val(passForm.textbox_ClassTuition1)
reg.ClassTuition2 = Val(passForm.textbox_ClassTuition2)
reg.ClassTuition3 = Val(passForm.textbox_ClassTuition3)
reg.ClassTuition4 = Val(passForm.textbox_ClassTuition4)
reg.ClassTuition5 = Val(passForm.textbox_ClassTuition5)
reg.ClassTuition6 = Val(passForm.textbox_ClassTuition6)

reg.Installments = Val(passForm.textbox_Installments_SetVal)
reg.Student_Tuition = Val(passForm.textbox_Student_Tuition)
reg.Student_Fees = Val(passForm.textbox_Student_Fees)
reg.Student_Net = Val(passForm.textbox_Student_Net)
reg.DownPay = Val(passForm.textbox_Downpayment_SetVal)
reg.CostPerMonth = Val(passForm.textbox_DollarsPerMonth_SetVal)

If passForm.option_Calc_by_MonthlyPayments = True Then
    reg.PaymentType = 1
ElseIf passForm.option_Calc_by_Installments = True Then
    reg.PaymentType = 2
ElseIf passForm.option_Payment_in_Full = True Then
    reg.PaymentType = 3
ElseIf passForm.option_No_Cost = True Then
    reg.PaymentType = 4
Else
    reg.PaymentType = 0
End If

'Error Handler used to cover a missing PA field
On Error GoTo Does_Not_Exist:
reg.Parent_Invoice = Val(passForm.textbox_Parent_Invoice)

Cleanup:
Exit Sub

'Checked by the Confirm_Data_In_Reg_Class Sub
Does_Not_Exist:
reg.Parent_Invoice = -1
Resume Cleanup

End Sub

Private Sub Confirm_Data_In_Stu_Class(ByRef Stu As cStudent, _
    ByRef blueMessage As String, ByRef redMessage As String)
    
'"""
'Populates the confirmation messages.
'
'Accepts the cStudent class variable, the "success" message string, and
'   the "failure" message string.
'Returns True if fully validated; False if not.  This, in turn, delivers
'   the appropriate message to the end user.
'"""

'First Name
If Len(Stu.FirstName) > 0 Then
    blueMessage = blueMessage & "First Name:" & vbTab & Stu.FirstName & vbNewLine
Else
    redMessage = redMessage & "* First Name is required." & vbNewLine
End If

'Last Name
If Len(Stu.LastName) > 0 Then
    blueMessage = blueMessage & "Last Name:" & vbTab & Stu.LastName & vbNewLine
Else
    redMessage = redMessage & "* Laste Name is required." & vbNewLine
End If

'Middle Name / Not Required
blueMessage = blueMessage & "Middle Name:" & vbTab & Stu.MidName & vbNewLine & vbNewLine
'Phone Number / Not Required
blueMessage = blueMessage & "Phone #:" & vbTab & Stu.PhoneArea & "-" & Stu.PhoneBase & vbNewLine
'Email / Not Required
blueMessage = blueMessage & "Email:" & vbTab & Stu.Email & vbNewLine & vbNewLine

'Address, First Line
If Len(Stu.Address0) > 0 Then
    blueMessage = blueMessage & "Address:" & vbTab & Stu.Address0 & vbNewLine
Else
    redMessage = redMessage & "* Address (Line A) is a required field" & vbNewLine
End If
'Address, Second Line / Not Required
blueMessage = blueMessage & "Address:" & vbTab & Stu.Address1 & vbNewLine
'Address, Third Line / Not Required
blueMessage = blueMessage & "Address:" & vbTab & Stu.Address2 & vbNewLine
'Address, Fourth Line / Not Required
blueMessage = blueMessage & "Address:" & vbTab & Stu.Address3 & vbNewLine & vbNewLine

'City
If Len(Stu.City) > 0 Then
    blueMessage = blueMessage & "City:" & vbTab & Stu.City & vbNewLine
Else
    redMessage = redMessage & "* The City is missing" & vbNewLine
End If
'State
If Len(Stu.State) > 0 Then
    blueMessage = blueMessage & "State:" & vbTab & Stu.State & vbNewLine
Else
    redMessage = redMessage & "* The State Abbrev. is missing" & vbNewLine
End If
'Zip Code
If Len(Stu.ZipCode) > 0 Then
    blueMessage = blueMessage & "Zip:" & vbTab & Stu.ZipCode & vbNewLine & vbNewLine
Else
    redMessage = redMessage & "* The Zip Code is missing" & vbNewLine
End If

'Gender
If Stu.Gender = "F" Then
    blueMessage = blueMessage & "Gender:" & vbTab & vbTab & "Female" & vbNewLine
ElseIf Stu.Gender = "M" Then
    blueMessage = blueMessage & "Gender:" & vbTab & vbTab & "Male" & vbNewLine
Else
    blueMessage = blueMessage & "Gender:" & vbTab & vbTab & "Unknown" & vbNewLine
End If

'Proof of HS
blueMessage = blueMessage & "Proof of HS:" & vbTab & Stu.ProofHS & vbNewLine & vbNewLine

End Sub

Private Sub Confirm_Data_In_Reg_Class(ByRef reg As cRegistration, _
    ByRef blueMessage As String, ByRef redMessage As String, EnrollType As Byte)
    
'"""
'Populates the confirmation messages.
'
'Accepts the cRegistration class variable, the "success" message string, and
'   the "failure" message string.
'Returns True if fully validated; False if not.  This, in turn, delivers
'   the appropriate message to the end user.
'
'Component of Registration Gate 0.
'"""

If reg.PaymentType = 1 Then
    blueMessage = blueMessage & "Payment Type: Calculate by monthly payments" & vbNewLine & vbNewLine
ElseIf reg.PaymentType = 2 Then
    blueMessage = blueMessage & "Payment Type: Calculate by number of payments" & vbNewLine & vbNewLine
ElseIf reg.PaymentType = 3 Then
    blueMessage = blueMessage & "Payment Type: Payment in Full" & vbNewLine & vbNewLine
ElseIf reg.PaymentType = 4 Then
    blueMessage = blueMessage & "Payment Type: Enrollment At No Cost" & vbNewLine & vbNewLine
Else
    redMessage = redMessage & "* Payment Type not selected" & vbNewLine
End If

If EnrollType = 1 Or EnrollType = 2 Then
    blueMessage = blueMessage & "Course Mod:" & vbTab & reg.FullProgramCode & vbNewLine
    
    If Not IsNumeric(reg.FullProgramCode) Or Not Len(reg.FullProgramCode) = 8 Then redMessage = redMessage & "* The program mod number is not 8 numbers long" & vbNewLine
    
    If reg.Parent_Invoice = -1 Then
    blueMessage = blueMessage & "Tuition:" & vbTab & vbTab & Format(reg.FullProgramPrice, "Currency") & vbNewLine & vbNewLine
    blueMessage = blueMessage & "Down Pay:" & vbTab & Format(reg.DownPay, "Currency") & vbNewLine
    blueMessage = blueMessage & "Installments:" & vbTab & reg.Installments & vbNewLine
    blueMessage = blueMessage & "Monthly Payments:" & vbTab & Format(reg.CostPerMonth, "Currency") & vbNewLine
    Else
    blueMessage = blueMessage & "PA TUI:" & vbTab & vbTab & Format(reg.Parent_Invoice, "Currency") & vbNewLine & vbNewLine
    blueMessage = blueMessage & "TR NET:" & vbTab & vbTab & Format(reg.Student_Net, "Currency") & vbNewLine & vbNewLine
    blueMessage = blueMessage & "Down Pay:" & vbTab & Format(reg.DownPay, "Currency") & vbNewLine
    blueMessage = blueMessage & "Installments:" & vbTab & reg.Installments & vbNewLine
    blueMessage = blueMessage & "Monthly Payments:" & vbTab & Format(reg.CostPerMonth, "Currency") & vbNewLine
    End If

ElseIf EnrollType = 3 Then
    If Len(reg.ModCode0) > 0 Then blueMessage = blueMessage & "Individual:" & vbTab & reg.ModCode0 & " [" & Format(reg.ClassTuition0, "Currency") & "]" & vbNewLine
    If Len(reg.ModCode1) > 0 Then blueMessage = blueMessage & "Individual:" & vbTab & reg.ModCode1 & " [" & Format(reg.ClassTuition1, "Currency") & "]" & vbNewLine
    If Len(reg.ModCode2) > 0 Then blueMessage = blueMessage & "Individual:" & vbTab & reg.ModCode2 & " [" & Format(reg.ClassTuition2, "Currency") & "]" & vbNewLine
    If Len(reg.ModCode3) > 0 Then blueMessage = blueMessage & "Individual:" & vbTab & reg.ModCode3 & " [" & Format(reg.ClassTuition3, "Currency") & "]" & vbNewLine
    If Len(reg.ModCode4) > 0 Then blueMessage = blueMessage & "Individual:" & vbTab & reg.ModCode4 & " [" & Format(reg.ClassTuition4, "Currency") & "]" & vbNewLine
    If Len(reg.ModCode5) > 0 Then blueMessage = blueMessage & "Individual:" & vbTab & reg.ModCode5 & " [" & Format(reg.ClassTuition5, "Currency") & "]" & vbNewLine
    If Len(reg.ModCode6) > 0 Then blueMessage = blueMessage & "Individual:" & vbTab & reg.ModCode6 & " [" & Format(reg.ClassTuition6, "Currency") & "]" & vbNewLine & vbNewLine
    
    If reg.Parent_Invoice = -1 Then
    blueMessage = blueMessage & "Total Tuition:" & vbTab & Format(reg.Student_Tuition, "Currency") & vbNewLine & vbNewLine
    blueMessage = blueMessage & "Down Pay:" & vbTab & Format(reg.DownPay, "Currency") & vbNewLine
    blueMessage = blueMessage & "Installments:" & vbTab & reg.Installments & vbNewLine
    blueMessage = blueMessage & "Monthly Payments:" & vbTab & Format(reg.CostPerMonth, "Currency") & vbNewLine
    Else
    blueMessage = blueMessage & "PA TUI:" & vbTab & vbTab & Format(reg.Parent_Invoice, "Currency") & vbNewLine & vbNewLine
    blueMessage = blueMessage & "TR NET:" & vbTab & vbTab & Format(reg.Student_Net, "Currency") & vbNewLine & vbNewLine
    blueMessage = blueMessage & "Down Pay:" & vbTab & Format(reg.DownPay, "Currency") & vbNewLine
    blueMessage = blueMessage & "Installments:" & vbTab & reg.Installments & vbNewLine
    blueMessage = blueMessage & "Monthly Payments:" & vbTab & Format(reg.CostPerMonth, "Currency") & vbNewLine
    End If
    
Else
    redMessage = redMessage & "* Enrollment Type not selected" & vbNewLine
End If
    
End Sub

Private Function Confirm_Indiv_Course_Codes(reg As cRegistration) As Boolean

'"""
'When registering a student for individual college credits, it is a relatively easy mistake _
    to accidentally leave out the course mod (which leaves the field with 6 characters _
    as opposed to 8 characters).  HOWEVER, there are several course mods that are legitimately _
    less than 8 characters.
'Therefore, this procedure checks the individual mods for length and only provides a _
    warning for when a potential mistake may exist.
'"""

Dim str_Message As String
Dim bool_check As Boolean

bool_check = False
Confirm_Indiv_Course_Codes = False
str_Message = "Warning!  The following class codes are less than 8 characters:" & vbNewLine & vbNewLine

If Len(Trim(reg.ModCode0)) > 0 And Len(Trim(reg.ModCode0)) < 8 Then
    str_Message = str_Message & CStr(reg.ModCode0) & vbNewLine
    bool_check = True
End If

If Len(Trim(reg.ModCode1)) > 0 And Len(Trim(reg.ModCode1)) < 8 Then
    str_Message = str_Message & CStr(reg.ModCode1) & vbNewLine
    bool_check = True
End If
    
If Len(Trim(reg.ModCode2)) > 0 And Len(Trim(reg.ModCode2)) < 8 Then
    str_Message = str_Message & CStr(reg.ModCode2) & vbNewLine
    bool_check = True
End If

If Len(Trim(reg.ModCode3)) > 0 And Len(Trim(reg.ModCode3)) < 8 Then
    str_Message = str_Message & CStr(reg.ModCode3) & vbNewLine
    bool_check = True
End If

If Len(Trim(reg.ModCode4)) > 0 And Len(Trim(reg.ModCode4)) < 8 Then
    str_Message = str_Message & CStr(reg.ModCode4) & vbNewLine
    bool_check = True
End If

If Len(Trim(reg.ModCode5)) > 0 And Len(Trim(reg.ModCode5)) < 8 Then
    str_Message = str_Message & CStr(reg.ModCode5) & vbNewLine
    bool_check = True
End If

If Len(Trim(reg.ModCode6)) > 0 And Len(Trim(reg.ModCode6)) < 8 Then
    str_Message = str_Message & CStr(reg.ModCode6) & vbNewLine
    bool_check = True
End If

str_Message = str_Message & "Please confirm that the above class codes are correct before proceeding with the enrollment"

If bool_check = True Then
    If MsgBox(str_Message, vbOKCancel, "Mod Check") = vbCancel Then
        Confirm_Indiv_Course_Codes = True
    End If
End If

End Function

Private Sub Store_TextBox_Objects(ByRef passArr() As Object, passForm As MSForms.UserForm)

'"""
'Passes textbox references into the selected array
'"""

Set passArr(0) = passForm.textbox_ProgramMod
Set passArr(1) = passForm.textbox_BaseTuition
Set passArr(2) = passForm.textbox_ClassMod0
Set passArr(3) = passForm.textbox_ClassMod1
Set passArr(4) = passForm.textbox_ClassMod2
Set passArr(5) = passForm.textbox_ClassMod3
Set passArr(6) = passForm.textbox_ClassMod4
Set passArr(7) = passForm.textbox_ClassMod5
Set passArr(8) = passForm.textbox_ClassMod6
Set passArr(9) = passForm.textbox_ClassTuition0
Set passArr(10) = passForm.textbox_ClassTuition1
Set passArr(11) = passForm.textbox_ClassTuition2
Set passArr(12) = passForm.textbox_ClassTuition3
Set passArr(13) = passForm.textbox_ClassTuition4
Set passArr(14) = passForm.textbox_ClassTuition5
Set passArr(15) = passForm.textbox_ClassTuition6

End Sub

Private Sub Manipulate_TextBoxes(passArray() As Object, passBoolean As Boolean)

'"""
'Accepts an array of userform textboxes.  Locks or unlocks as needed.
'
'The color variables are dimensioned as variant so as to allow for different
'   formatting options.
'"""

Dim oppositeBoolean As Boolean
Dim i As Integer
Dim var_Selected_Color As Variant
Dim var_Opposite_Color As Variant

oppositeBoolean = Not passBoolean

'Determines color selection based on passed bool value
If passBoolean = True Then
    var_Selected_Color = cWhite
    var_Opposite_Color = cGrey
Else:
    var_Selected_Color = cGrey
    var_Opposite_Color = cWhite
End If

For i = LBound(passArray) To UBound(passArray)

    If i < 2 Then
    
        'Unlocks if passed bool is true; locks if false
        passArray(i).Locked = oppositeBoolean
        passArray(i).BackColor = var_Selected_Color
        'PassArray(i) = vbNullString    'Necessary? [...]
    
    Else:

        'Locks if passed bool is true; unlocks if false
        passArray(i).Locked = passBoolean
        passArray(i).BackColor = var_Opposite_Color
        'PassArray(i) = vbNullString    'Necessary? [...]

    End If

Next i

End Sub

Private Sub Show_HelpText(ByRef passTextbox As Object, str_HelpText As String)

passTextbox = str_HelpText

End Sub

Private Sub FieldLock(obj As Object, bool As Boolean)
'Deprecated?

If bool = True Then obj.Locked = False Else obj.Locked = True

End Sub

Private Sub FieldColor(obj As Object, bool As Boolean)
'Deprecated?

If bool = True Then obj.BackColor = cWhite Else obj.BackColor = cGrey

End Sub

Private Sub Pull_Stu_Data_From_AS400(objAS400 As Object, ByRef Stu As cStudent, tag As cTag)

'"""
'When adding classes for a student already in the system, the user only inputs
'   the Student ID#, not the student's information. Therefore, in automating
'   the PDF order form, this procedure is necessary to capture the student info
'   after the registration itself is complete.
'
'Not a critical procedure.
'
'GetText:
'[String] = [AS400 Object].autECLPS.GetText([Row], [Column], [Length])
'"""

Dim get_text As String

'This is a low-priority procedure. Any errors can be safely skipped.
On Error Resume Next

get_text = vbNullString

'Checks for correct PS
Call WaitForReady(objAS400, 10)
get_text = objAS400.autECLPS.GetText(1, 2, 6)
If Not get_text = "603131" Then GoTo Cleanup
get_text = vbNullString

'Takes Address0
Call WaitForReady(objAS400, 10)
get_text = objAS400.autECLPS.GetText(8, 2, 28)
Stu.Address0 = Trim(get_text)
get_text = vbNullString

'Takes Address1
Call WaitForReady(objAS400, 10)
get_text = objAS400.autECLPS.GetText(9, 2, 28)
Stu.Address1 = Trim(get_text)
get_text = vbNullString

'Takes City
Call WaitForReady(objAS400, 10)
get_text = objAS400.autECLPS.GetText(10, 2, 15)
Stu.City = Trim(get_text)
get_text = vbNullString

'Takes State Abbrev.
Call WaitForReady(objAS400, 10)
Stu.State = objAS400.autECLPS.GetText(10, 18, 2)

'Takes Zip Code
Call WaitForReady(objAS400, 10)
Stu.ZipCode = objAS400.autECLPS.GetText(10, 22, 5)

'Takes Area Code
Call WaitForReady(objAS400, 10)
Stu.PhoneArea = objAS400.autECLPS.GetText(12, 9, 3)

'Takes Base Phone#
Call WaitForReady(objAS400, 10)
get_text = objAS400.autECLPS.GetText(12, 15, 10)
Stu.PhoneBase = Trim(get_text)
get_text = vbNullString

Cleanup:
End Sub

Private Function Create_PDF(Stu As cStudent, reg As cRegistration, tag As cTag) As String

Dim objWord As Object
Dim objDoc As Object
Dim str_Timestamp, str_Datestamp As String
Dim str_CurrentFolder, str_ReportsFolder, str_SourcesFolder As String
Dim str_Template_Name, str_New_Document_Name As String
Dim str_CityStateAndZip, str_PhoneAndEmail, str_TotalSale As String


' /// Setting the initial values ///

Application.ScreenUpdating = False
Application.DisplayAlerts = False

str_Timestamp = Format(CStr(Now), "mm.dd.yyyy hh.mm.ss")
str_Datestamp = Format(Now, "MMMM dd, yyyy")

str_CurrentFolder = ThisWorkbook.Path
str_ReportsFolder = str_CurrentFolder & "\Reports"
str_SourcesFolder = str_CurrentFolder & "\Sources"

str_Template_Name = str_SourcesFolder & "\TEMPLATE - Order Form.doc"
str_New_Document_Name = str_ReportsFolder & _
    "\" & "Enrollment - " & Stu.MailingName & Space(1) & str_Timestamp & ".pdf"


' /// Checking folders ///
    
'If the Reports folder doesn't already exist, then this creates one
If Dir(str_ReportsFolder, vbDirectory) = "" Then MkDir str_ReportsFolder

'If the Sources folder doesn't already exist, then this passes an error message
If Dir(str_SourcesFolder, vbDirectory) = "" Then GoTo FolderDoes_Not_Exist


' /// Setting objects ///

'GetObject will error if Word isn't already open; therefore, Resume Next will _
    skip it to the following CreateObject conditional
On Error Resume Next
Set objWord = GetObject(, "Word.Application")

'Creates the MS Word Object if it isn't open
If objWord Is Nothing Then
    Set objWord = CreateObject("Word.Application")
End If

'Resumes preferred error handling
On Error GoTo BookmarkError

'Activates Document
objWord.Visible = True

'Sets the document variable
objWord.Documents.Open str_Template_Name
Set objDoc = objWord.Documents.Open(str_Template_Name, ConfirmConversions:=False, ReadOnly:=False)

' /// Inserting the relevent information ///

'Format:
'objDoc.Bookmarks("BOOKMARK").Range.Text = VARIABLE

objDoc.Bookmarks("bmStudentID").Range.Text = tag.StudentID
objDoc.Bookmarks("bmDatestamp").Range.Text = str_Datestamp

If tag.EnrollmentType = 1 Or tag.EnrollmentType = 2 Then
    objDoc.Bookmarks("bmCourseMod2").Range.Text = reg.FullProgramCode
    objDoc.Bookmarks("bmCourseTUI2").Range.Text = Format(CStr(reg.FullProgramPrice), "Currency")
ElseIf tag.EnrollmentType = 3 Then
    objDoc.Bookmarks("bmCourseMod0").Range.Text = reg.ModCode0
    objDoc.Bookmarks("bmCourseMod1").Range.Text = reg.ModCode1
    objDoc.Bookmarks("bmCourseMod2").Range.Text = reg.ModCode2
    objDoc.Bookmarks("bmCourseMod3").Range.Text = reg.ModCode3
    objDoc.Bookmarks("bmCourseMod4").Range.Text = reg.ModCode4
    objDoc.Bookmarks("bmCourseMod5").Range.Text = reg.ModCode5
    objDoc.Bookmarks("bmCourseMod6").Range.Text = reg.ModCode6
    If reg.ClassTuition0 >= 0.01 Then objDoc.Bookmarks("bmCourseTUI0").Range.Text = Format(CStr(reg.ClassTuition0), "Currency")
    If reg.ClassTuition1 >= 0.01 Then objDoc.Bookmarks("bmCourseTUI1").Range.Text = Format(CStr(reg.ClassTuition1), "Currency")
    If reg.ClassTuition2 >= 0.01 Then objDoc.Bookmarks("bmCourseTUI2").Range.Text = Format(CStr(reg.ClassTuition2), "Currency")
    If reg.ClassTuition3 >= 0.01 Then objDoc.Bookmarks("bmCourseTUI3").Range.Text = Format(CStr(reg.ClassTuition3), "Currency")
    If reg.ClassTuition4 >= 0.01 Then objDoc.Bookmarks("bmCourseTUI4").Range.Text = Format(CStr(reg.ClassTuition4), "Currency")
    If reg.ClassTuition5 >= 0.01 Then objDoc.Bookmarks("bmCourseTUI5").Range.Text = Format(CStr(reg.ClassTuition5), "Currency")
    If reg.ClassTuition6 >= 0.01 Then objDoc.Bookmarks("bmCourseTUI6").Range.Text = Format(CStr(reg.ClassTuition6), "Currency")
End If

objDoc.Bookmarks("bmMailingName").Range.Text = Stu.MailingName
objDoc.Bookmarks("bmAddress0").Range.Text = Stu.Address0
objDoc.Bookmarks("bmAddress1").Range.Text = Stu.Address1
objDoc.Bookmarks("bmAddress2").Range.Text = Stu.Address2
objDoc.Bookmarks("bmAddress3").Range.Text = Stu.Address3

str_CityStateAndZip = Stu.City & ", " & Stu.State & Space(2) & CStr(Stu.ZipCode)
objDoc.Bookmarks("bmCityStateZip").Range.Text = str_CityStateAndZip

str_PhoneAndEmail = Format(Stu.PhoneArea, "(###)") & Format(Stu.PhoneBase, "###-####") & Space(6) & Stu.Email
objDoc.Bookmarks("bmPhoneEmail").Range.Text = str_PhoneAndEmail

If tag.ParentStatus = True Then
    objDoc.Bookmarks("bmBaseTUI").Range.Text = Format(CStr(reg.Parent_Invoice), "Currency")
    objDoc.Bookmarks("bmAddTUI").Range.Text = Format(CStr(reg.Student_Tuition), "Currency")
    objDoc.Bookmarks("bmStuFEE").Range.Text = Format(CStr(reg.Student_Fees), "Currency")
    str_TotalSale = Format(CStr(reg.Parent_Invoice + reg.Student_Net), "Currency")
    objDoc.Bookmarks("bmTotal").Range.Text = str_TotalSale
    objDoc.Bookmarks("bmPayable").Range.Text = Format(CStr(reg.DownPay), "Currency")
    objDoc.Bookmarks("bmParent").Range.Text = "Parent LC#: " & vbTab & tag.ParentLC
    objDoc.Bookmarks("bmCAA").Range.Text = "Title:" & vbTab & "CAA"
    objDoc.Bookmarks("bmDoD").Range.Text = "Name:" & vbTab & "DoD"
    
ElseIf tag.ParentStatus = False Then
    objDoc.Bookmarks("bmBaseTUI").Range.Text = Format(CStr(reg.Student_Tuition), "Currency")
    objDoc.Bookmarks("bmAddTUI").Range.Text = Format("0", "Currency")
    objDoc.Bookmarks("bmStuFEE").Range.Text = Format(CStr(reg.Student_Fees), "Currency")
    objDoc.Bookmarks("bmTotal").Range.Text = Format(CStr(reg.Student_Net), "Currency")
    objDoc.Bookmarks("bmPayable").Range.Text = Format(CStr(reg.DownPay), "Currency")
End If

objDoc.Bookmarks("bmDP").Range.Text = Format(CStr(reg.DownPay), "Currency")
objDoc.Bookmarks("bmMonthly").Range.Text = Format(CStr(reg.CostPerMonth), "Currency")
objDoc.Bookmarks("bmSalesperson").Range.Text = tag.SalesPerson


' /// Saving and Closing ///
ReturnToSave:

On Error GoTo SavingError

'Saves as PDF
objDoc.SaveAs2 str_New_Document_Name, 17

'Closes the template document without saving
objWord.Quit SaveChanges:=False

Create_PDF = str_New_Document_Name

' /// Cleanup ///
Cleanup:

'Empties the object variables
Set objWord = Nothing
Set objDoc = Nothing

Application.ScreenUpdating = True
Application.DisplayAlerts = True

Exit Function


' /// Error Handling ///

FolderDoes_Not_Exist:
GoTo Cleanup

BookmarkError:
Resume ReturnToSave

SavingError:
Resume Cleanup

End Function

Private Sub InitialData_Student_No(Stu As cStudent, tag As cTag, _
                                wSheet As Excel.Worksheet, long_row As Long)
                                
If Not Debugger Then On Error Resume Next Else On Error GoTo 0

Call PassToDataSheet(CStr(long_row - 20), "Entry", wSheet, long_row)
Call PassToDataSheet(Format(Now(), "yyyy/MM/dd"), "Date", wSheet, long_row)
Call PassToDataSheet(Format(Now(), "HH:mm:ss"), "Time", wSheet, long_row)
Call PassToDataSheet(Debugger, "DebugMode", wSheet, long_row)
Call PassToDataSheet("Enrollment", "Action", wSheet, long_row)
Call PassToDataSheet("None", "ErrMessage", wSheet, long_row)

Call PassToDataSheet(True, "Gate00", wSheet, long_row)
Call PassToDataSheet(False, "AddressBookNavigate", wSheet, long_row)
Call PassToDataSheet(False, "Gate01", wSheet, long_row)
Call PassToDataSheet(False, "Gate02", wSheet, long_row)
Call PassToDataSheet(False, "Gate03", wSheet, long_row)
Call PassToDataSheet(False, "Gate04", wSheet, long_row)

Call PassToDataSheet(False, "Gate05", wSheet, long_row)
Call PassToDataSheet("-", "G06Path", wSheet, long_row)
Call PassToDataSheet(False, "Gate061", wSheet, long_row)
Call PassToDataSheet(False, "Gate062", wSheet, long_row)
Call PassToDataSheet(False, "Gate063", wSheet, long_row)
Call PassToDataSheet(False, "Gate064", wSheet, long_row)
Call PassToDataSheet(False, "Gate07", wSheet, long_row)
Call PassToDataSheet("", "str_New_Document_Name", wSheet, long_row)

Call PassToDataSheet(tag.StudentStatus, "Student", wSheet, long_row)
Call PassToDataSheet(tag.ParentStatus, "Parent", wSheet, long_row)
Call PassToDataSheet(tag.Activity, "Activity", wSheet, long_row)
Call PassToDataSheet(tag.SalesPerson, "SalesPerson", wSheet, long_row)
Call PassToDataSheet(tag.ParentLC, "ParentLC", wSheet, long_row)
Call PassToDataSheet(tag.EnrollmentType, "EnrollmentType", wSheet, long_row)
Call PassToDataSheet(tag.Session, "Session", wSheet, long_row)
Call PassToDataSheet(tag.B2BPrefix, "B2BPrefix", wSheet, long_row)
Call PassToDataSheet(tag.SchoolCode, "SchoolCode", wSheet, long_row)
Call PassToDataSheet(tag.DegreeCode, "DegreeCode", wSheet, long_row)

Call PassToDataSheet(Stu.FirstName, "FirstName", wSheet, long_row)
Call PassToDataSheet(Stu.LastName, "LastName", wSheet, long_row)
Call PassToDataSheet(Stu.MidName, "MidName", wSheet, long_row)
Call PassToDataSheet(Stu.MailingName, "MailingName", wSheet, long_row)
Call PassToDataSheet(Stu.AlphaName, "AlphaName", wSheet, long_row)
Call PassToDataSheet(Stu.PhoneArea, "PhoneArea", wSheet, long_row)
Call PassToDataSheet(Stu.PhoneBase, "PhoneBase", wSheet, long_row)
Call PassToDataSheet(Stu.Address0, "Address0", wSheet, long_row)
Call PassToDataSheet(Stu.Address1, "Address1", wSheet, long_row)
Call PassToDataSheet(Stu.Address2, "Address2", wSheet, long_row)
Call PassToDataSheet(Stu.Address3, "Address3", wSheet, long_row)
Call PassToDataSheet(Stu.City, "City", wSheet, long_row)
Call PassToDataSheet(Stu.State, "State", wSheet, long_row)
Call PassToDataSheet(Stu.ZipCode, "ZipCode", wSheet, long_row)
Call PassToDataSheet(Stu.ProofHS, "ProofHS", wSheet, long_row)

End Sub

Private Sub InitialData_Student_Yes(Stu As cStudent, tag As cTag, _
            wSheet As Excel.Worksheet, long_row As Long)
            
If Not Debugger Then On Error Resume Next Else On Error GoTo 0

Call PassToDataSheet(CStr(long_row - 20), "Entry", wSheet, long_row)
Call PassToDataSheet(Format(Now(), "yyyy/MM/dd"), "Date", wSheet, long_row)
Call PassToDataSheet(Format(Now(), "HH:mm:ss"), "Time", wSheet, long_row)
Call PassToDataSheet(Debugger, "DebugMode", wSheet, long_row)
Call PassToDataSheet("Enrollment", "Action", wSheet, long_row)
Call PassToDataSheet("None", "ErrMessage", wSheet, long_row)

Call PassToDataSheet(True, "Gate00", wSheet, long_row)
Call PassToDataSheet("-", "AddressBookNavigate", wSheet, long_row)
Call PassToDataSheet("-", "Gate01", wSheet, long_row)
Call PassToDataSheet("-", "Gate02", wSheet, long_row)
Call PassToDataSheet("-", "Gate03", wSheet, long_row)
Call PassToDataSheet("-", "Gate04", wSheet, long_row)

Call PassToDataSheet(False, "Gate05", wSheet, long_row)
Call PassToDataSheet("-", "G06Path", wSheet, long_row)
Call PassToDataSheet(False, "Gate061", wSheet, long_row)
Call PassToDataSheet(False, "Gate062", wSheet, long_row)
Call PassToDataSheet(False, "Gate063", wSheet, long_row)
Call PassToDataSheet(False, "Gate064", wSheet, long_row)
Call PassToDataSheet(False, "Gate07", wSheet, long_row)
Call PassToDataSheet("", "str_New_Document_Name", wSheet, long_row)

Call PassToDataSheet(tag.StudentStatus, "Student", wSheet, long_row)
Call PassToDataSheet(tag.ParentStatus, "Parent", wSheet, long_row)
Call PassToDataSheet(tag.Activity, "Activity", wSheet, long_row)
Call PassToDataSheet(tag.SalesPerson, "SalesPerson", wSheet, long_row)
Call PassToDataSheet(tag.ParentLC, "ParentLC", wSheet, long_row)
Call PassToDataSheet(tag.EnrollmentType, "EnrollmentType", wSheet, long_row)
Call PassToDataSheet(tag.Session, "Session", wSheet, long_row)
Call PassToDataSheet(tag.B2BPrefix, "B2BPrefix", wSheet, long_row)
Call PassToDataSheet(tag.SchoolCode, "SchoolCode", wSheet, long_row)
Call PassToDataSheet(tag.DegreeCode, "DegreeCode", wSheet, long_row)

Call PassToDataSheet("-", "FirstName", wSheet, long_row)
Call PassToDataSheet("-", "LastName", wSheet, long_row)
Call PassToDataSheet("-", "MidName", wSheet, long_row)
Call PassToDataSheet(Stu.MailingName, "MailingName", wSheet, long_row)
Call PassToDataSheet("-", "AlphaName", wSheet, long_row)
Call PassToDataSheet("-", "PhoneArea", wSheet, long_row)
Call PassToDataSheet("-", "PhoneBase", wSheet, long_row)
Call PassToDataSheet("-", "Address0", wSheet, long_row)
Call PassToDataSheet("-", "Address1", wSheet, long_row)
Call PassToDataSheet("-", "Address2", wSheet, long_row)
Call PassToDataSheet("-", "Address3", wSheet, long_row)
Call PassToDataSheet("-", "City", wSheet, long_row)
Call PassToDataSheet("-", "State", wSheet, long_row)
Call PassToDataSheet("-", "ZipCode", wSheet, long_row)
Call PassToDataSheet("-", "ProofHS", wSheet, long_row)
  
End Sub
                                
Private Sub InitialData_Registration(reg As cRegistration, _
            wSheet As Excel.Worksheet, long_row As Long)
            
If Not Debugger Then On Error Resume Next Else On Error GoTo 0

Call PassToDataSheet(reg.FullProgramCode, "FullProgramCode", wSheet, long_row)
Call PassToDataSheet(reg.ModCode0, "ModCode0", wSheet, long_row)
Call PassToDataSheet(reg.ModCode1, "ModCode1", wSheet, long_row)
Call PassToDataSheet(reg.ModCode2, "ModCode2", wSheet, long_row)
Call PassToDataSheet(reg.ModCode3, "ModCode3", wSheet, long_row)
Call PassToDataSheet(reg.ModCode4, "ModCode4", wSheet, long_row)
Call PassToDataSheet(reg.ModCode5, "ModCode5", wSheet, long_row)
Call PassToDataSheet(reg.ModCode6, "ModCode6", wSheet, long_row)
Call PassToDataSheet(reg.PaymentType, "PaymentType", wSheet, long_row)
Call PassToDataSheet(reg.Installments, "Installments", wSheet, long_row)
Call PassToDataSheet(reg.FullProgramPrice, "FullProgramPrice", wSheet, long_row)
Call PassToDataSheet(reg.ClassTuition0, "ClassTuition0", wSheet, long_row)
Call PassToDataSheet(reg.ClassTuition1, "ClassTuition1", wSheet, long_row)
Call PassToDataSheet(reg.ClassTuition2, "ClassTuition2", wSheet, long_row)
Call PassToDataSheet(reg.ClassTuition3, "ClassTuition3", wSheet, long_row)
Call PassToDataSheet(reg.ClassTuition4, "ClassTuition4", wSheet, long_row)
Call PassToDataSheet(reg.ClassTuition5, "ClassTuition5", wSheet, long_row)
Call PassToDataSheet(reg.ClassTuition6, "ClassTuition6", wSheet, long_row)
Call PassToDataSheet(reg.Parent_Invoice, "Parent_Invoice", wSheet, long_row)
Call PassToDataSheet(reg.Student_Tuition, "Student_Tuition", wSheet, long_row)
Call PassToDataSheet(reg.Student_Fees, "Student_Fees", wSheet, long_row)
Call PassToDataSheet(reg.Student_Net, "Student_Net", wSheet, long_row)
Call PassToDataSheet(reg.DownPay, "DownPay", wSheet, long_row)
Call PassToDataSheet(reg.CostPerMonth, "CostPerMonth", wSheet, long_row)

End Sub

Private Sub PassToDataSheet(PassVar As Variant, passName As String, _
                                    wSheet As Excel.Worksheet, long_row As Long)

Dim long_col As Long
Dim str As String

On Error GoTo ErrHandler
str = CStr(PassVar)

Continue:
On Error GoTo Cleanup

If long_col = 0 Then GoTo Cleanup Else long_col = Range(passName).Column

If Len(str) < 1 Then Cells(long_row, long_col) = "-" Else Cells(long_row, long_col) = str

Cleanup:
str = vbNullString
long_col = 0

Exit Sub

ErrHandler:
str = "~Error~"
Resume Continue

End Sub






'=================================================
' # New_Student_No_Parent (Userform)
'
' Note: The launch button requires the AS/400
'
' This userform handles registration for brand new students _
enrolling without a "parent" (third-party agency)

' Input: _
Manual user entries

' Output: _
Passes AS/400 control to a seperate module _
A PDF document _

' To-Do List: _
1 - Evaluate variable and procedure names _
2 - Improve comments (provide better context for procedures/actions) _
2 - Merge the cStudent, cRegistration, and cTag classes _
3 - Further move actions/calculations to separate modules _
4 - Merge the four separate enrollment userforms into one _
5 - Add Outlook functionality _
6 - Add Github functionality _
7 - Can DRY be applied to VBA events? _

'=================================================

Option Explicit

Private Sub UserForm_Initialize()

'"""
'Initialization event. Sets userform to its base state
'"""

'Dimensions end user selection options
Dim selection_Salesperson As String
Dim selection_Session As String
Dim selection_Activity As String

'Empties the textboxes
textbox_Salesperson.Value = vbNullString
textbox_Firstname.Value = vbNullString
textbox_Lastname.Value = vbNullString
textbox_Midname.Value = vbNullString
textbox_Phone_Area.Value = vbNullString
textbox_Phone_SevenDigit.Value = vbNullString
textbox_Email.Value = vbNullString
textbox_AddressA.Value = vbNullString
textbox_AddressB.Value = vbNullString
textbox_AddressC.Value = vbNullString
textbox_AddressD.Value = vbNullString
textbox_City.Value = vbNullString
textbox_State.Value = vbNullString
textbox_Zipcode.Value = vbNullString
textbox_ProgramMod.Value = vbNullString
textbox_BaseTuition.Value = vbNullString
textbox_ClassMod0.Value = vbNullString
textbox_ClassMod1.Value = vbNullString
textbox_ClassMod2.Value = vbNullString
textbox_ClassMod3.Value = vbNullString
textbox_ClassMod4.Value = vbNullString
textbox_ClassMod5.Value = vbNullString
textbox_ClassMod6.Value = vbNullString
textbox_ClassTuition0.Value = vbNullString
textbox_ClassTuition1.Value = vbNullString
textbox_ClassTuition2.Value = vbNullString
textbox_ClassTuition3.Value = vbNullString
textbox_ClassTuition4.Value = vbNullString
textbox_ClassTuition5.Value = vbNullString
textbox_ClassTuition6.Value = vbNullString
textbox_Student_Tuition.Value = vbNullString
textbox_Student_Fees.Value = vbNullString
textbox_Student_Net.Value = vbNullString
textbox_Downpayment_SetVal.Value = vbNullString
textbox_Installments_SetVal.Value = vbNullString
textbox_DollarsPerMonth_SetVal.Value = vbNullString
textbox_Downpayment_GetVal.Value = vbNullString
textbox_Installments_GetVal.Value = vbNullString
textbox_DollarsPerMonth_GetVal.Value = vbNullString
textbox_Finalpay_approx.Value = vbNullString
textbox_Helptext.Value = vbNullString

'Locks & Grays certain TextBoxes
textbox_Student_Tuition.Locked = True
textbox_Student_Tuition.BackColor = cGrey
textbox_Student_Net.Locked = True
textbox_Student_Net.BackColor = cGrey
textbox_Downpayment_GetVal.Locked = True
textbox_Downpayment_GetVal.BackColor = cGrey
textbox_Installments_GetVal.Locked = True
textbox_Installments_GetVal.BackColor = cGrey
textbox_DollarsPerMonth_GetVal.Locked = True
textbox_DollarsPerMonth_GetVal.BackColor = cGrey
textbox_Finalpay_approx.Locked = True
textbox_Finalpay_approx.BackColor = cGrey
textbox_Helptext.Locked = True
textbox_Helptext.BackColor = cGrey

selection_Salesperson = CStr(Range("DefaultSalesperson"))
textbox_Salesperson.Value = selection_Salesperson

selection_Session = CStr(Range("DefaultSession"))
selection_Activity = CStr(Range("ActivityDecision"))

'Initializes the ComboBoxes
combo_Session.Clear
With combo_Session
    .AddItem selection_Session
    .AddItem "A"
    .AddItem "B"
    .AddItem "C"
    .AddItem "D"
    .AddItem "E"
End With
combo_Session.Text = combo_Session.List(0)

combo_Activity.Clear
With combo_Activity
    .AddItem selection_Activity
    .AddItem "Show"
    .AddItem "Hide"
End With
combo_Activity.Text = combo_Activity.List(0)

'Unchecks the checkbox
checkbox_ProofHS.Value = False

'Sets initial focus
textbox_Firstname.SetFocus

End Sub



'/////////////////////////////////////////////////////////////////
'/////////////////////////////////////////////////////////////////



Private Sub textbox_Salesperson_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)

'Restricts the field to numbers only
Call RestrictToPostiveWholeNumbers(KeyAscii)

End Sub



Private Sub textbox_Phone_Area_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)

'Restricts the field to numbers only
Call RestrictToPostiveWholeNumbers(KeyAscii)

End Sub



Private Sub textbox_Phone_SevenDigit_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)

'Restricts the field to numbers only
Call RestrictToPostiveWholeNumbers(KeyAscii)

End Sub



Private Sub tbxZip_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)

'Restricts the field to numbers only
Call RestrictToPostiveWholeNumbers(KeyAscii)

End Sub



Private Sub textbox_ProgramMod_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)

'Restricts the field to numbers only
Call RestrictToPostiveWholeNumbers(KeyAscii)

End Sub



Private Sub textbox_BaseTuition_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)

'Restricts the field to only numbers and a single decimal
Call RestrictToPostiveFloatNumbers(KeyAscii, textbox_BaseTuition)

End Sub



Private Sub textbox_ClassTuition0_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)

'Restricts the field to only numbers and a single decimal
Call RestrictToPostiveFloatNumbers(KeyAscii, textbox_ClassTuition0)

End Sub



Private Sub textbox_ClassTuition1_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)

'Restricts the field to only numbers and a single decimal
Call RestrictToPostiveFloatNumbers(KeyAscii, textbox_ClassTuition1)

End Sub



Private Sub textbox_ClassTuition2_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)

'Restricts the field to only numbers and a single decimal
Call RestrictToPostiveFloatNumbers(KeyAscii, textbox_ClassTuition2)

End Sub



Private Sub textbox_ClassTuition3_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)

'Restricts the field to only numbers and a single decimal
Call RestrictToPostiveFloatNumbers(KeyAscii, textbox_ClassTuition3)

End Sub



Private Sub textbox_ClassTuition4_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)

'Restricts the field to only numbers and a single decimal
Call RestrictToPostiveFloatNumbers(KeyAscii, textbox_ClassTuition4)

End Sub



Private Sub textbox_ClassTuition5_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)

'Restricts the field to only numbers and a single decimal
Call RestrictToPostiveFloatNumbers(KeyAscii, textbox_ClassTuition5)

End Sub



Private Sub textbox_ClassTuition6_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)

'Restricts the field to only numbers and a single decimal
Call RestrictToPostiveFloatNumbers(KeyAscii, textbox_ClassTuition6)

End Sub



Private Sub textbox_Student_Fees_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)

'Restricts the field to only numbers and a single decimal
Call RestrictToPostiveFloatNumbers(KeyAscii, textbox_Student_Fees)

End Sub



Private Sub textbox_Downpayment_SetVal_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)

'Restricts the field to only numbers and a single decimal
Call RestrictToPostiveFloatNumbers(KeyAscii, textbox_Downpayment_SetVal)

End Sub



Private Sub textbox_Installments_SetVal_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)

'Restricts the field to numbers only
Call RestrictToPostiveWholeNumbers(KeyAscii)

End Sub



Private Sub textbox_DollarsPerMonth_SetVal_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)

'Restricts the field to only numbers and a single decimal
Call RestrictToPostiveFloatNumbers(KeyAscii, textbox_DollarsPerMonth_SetVal)

End Sub



'/////////////////////////////////////////////////////////////////
'/////////////////////////////////////////////////////////////////



Private Sub UserForm_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)

'Clears the help text when mouse hovers over the userform object itself
Me.textbox_Helptext = vbNullString

End Sub



Private Sub textbox_Salesperson_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
 
Call Show_HelpText(textbox_Helptext, _
    "(Required)  Enter your 4-digit salesperson code.")
    
End Sub



Private Sub combo_Session_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Select your AS400 Session. Please ensure the session is active and ready.")
    
End Sub



Private Sub textbox_Firstname_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "(Required)  Enter the student's first name.")

End Sub



Private Sub textbox_Lastname_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "(Required)  Enter the student's last name.")

End Sub



Private Sub textbox_Midname_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Enters the student's middle name/initial.")

End Sub



Private Sub textbox_Phone_Area_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Enters the student's area code (numbers only).")

End Sub



Private Sub textbox_Phone_SevenDigit_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Enters the student's base phone number (numbers only).")

End Sub



Private Sub textbox_Email_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Enters the student's email address.")

End Sub



Private Sub option_Male_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Select the student's gender.")

End Sub



Private Sub option_Female_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Select the student's gender.")

End Sub



Private Sub textbox_AddressA_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Enter the student's address. (First line).")

End Sub



Private Sub textbox_AddressB_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Enter the student's address. (Second line).")

End Sub



Private Sub textbox_AddressC_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Enter the student's address. (Third line).")

End Sub



Private Sub textbox_AddressD_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Enter the student's address. (Fourth line).")

End Sub



Private Sub textbox_City_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Enter the student's city.")

End Sub



Private Sub textbox_State_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Enter the student's 2-str_Session state abbreviation.")

End Sub



Private Sub tbxZip_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Enter the student's 5-digit zip code.")

End Sub



Private Sub checkbox_ProofHS_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Select verification of the student's Proof of Education.")

End Sub



Private Sub option_CareerProgram_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Enroll the student into a career program.")

End Sub



Private Sub option_FullSemester_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Enroll the student into a semester program.")

End Sub



Private Sub option_IndividualCredits_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Enroll the student into individual college credits.")

End Sub



Private Sub textbox_ProgramMod_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "(Required)  Enter the 8-digit program code.")

End Sub



Private Sub textbox_BaseTuition_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "(Required)  Enter the tuition amount.")

End Sub



Private Sub textbox_ClassMod0_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Enter the course mod.")

End Sub



Private Sub textbox_ClassMod1_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Enter the course mod.")

End Sub



Private Sub textbox_ClassMod2_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Enter the course mod.")

End Sub



Private Sub textbox_ClassMod3_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Enter the course mod.")

End Sub



Private Sub textbox_ClassMod4_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Enter the course mod.")

End Sub



Private Sub textbox_ClassMod5_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Enter the course mod.")

End Sub



Private Sub textbox_ClassMod6_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Enter the course mod.")

End Sub



Private Sub textbox_ClassTuition0_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Enter the base tuition for the selected class.")

End Sub



Private Sub textbox_ClassTuition1_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Enter the base tuition for the selected class.")

End Sub



Private Sub textbox_ClassTuition2_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Enter the base tuition for the selected class.")

End Sub



Private Sub textbox_ClassTuition3_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Enter the base tuition for the selected class.")

End Sub



Private Sub textbox_ClassTuition4_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Enter the base tuition for the selected class.")

End Sub



Private Sub textbox_ClassTuition5_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Enter the base tuition for the selected class.")

End Sub



Private Sub textbox_ClassTuition6_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Enter the base tuition for the selected class.")

End Sub



Private Sub button_Calculate_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Calculate the values listed below.")

End Sub



Private Sub button_ClearCalculation_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Clear the values listed below.")

End Sub



Private Sub textbox_Student_Tuition_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Show the total tuition value(s) from the selected program field(s).")

End Sub



Private Sub textbox_Student_Fees_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Enter the total cost of fees.")

End Sub



Private Sub textbox_Student_Net_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Shows the net total (tuition and fees).")

End Sub



Private Sub option_Calc_by_Installments_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Calculate payments based on the number of installments.")

End Sub



Private Sub option_Calc_by_MonthlyPayments_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Calculate payments based on the amount to pay per month.")

End Sub



Private Sub option_Payment_in_Full_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Student is paying in full.")

End Sub



Private Sub option_No_Cost_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Perform the registration without adding additional tuition.")

End Sub



Private Sub textbox_Downpayment_SetVal_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
    
Call Show_HelpText(textbox_Helptext, _
    "Enter the down payment.")
 
End Sub



Private Sub textbox_Downpayment_GetVal_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "The selected down payment.")

End Sub



Private Sub textbox_Installments_SetVal_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Calculate payments based on the number of installments.")

End Sub



Private Sub textbox_Installments_GetVal_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "The approximate number of installments. (Informational only).")

End Sub



Private Sub textbox_DollarsPerMonth_SetVal_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Calculate payments based on the amount to pay per month.")

End Sub



Private Sub textbox_DollarsPerMonth_GetVal_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "The approximate total per month. (Informational only).")

End Sub



Private Sub textbox_Finalpay_approx_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "The approximate final monthly payment. (Informational only).")

End Sub



Private Sub button_Launch_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Launch the Registration script.  An active AS/400 screen is required.")

End Sub



Private Sub button_Confirm_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
     
Call Show_HelpText(textbox_Helptext, _
    "Confirm the above entered information.")

End Sub



Private Sub button_ClearUserform_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    
Call Show_HelpText(textbox_Helptext, _
    "Clear the Registration form.")

End Sub



Private Sub button_Cancel_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text
    
Call Show_HelpText(textbox_Helptext, _
    "Close the Registration form.")

End Sub



Private Sub textbox_Helptext_MouseMove(ByVal Button As Integer, _
    ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
'Populates Help Text

Call Show_HelpText(textbox_Helptext, _
    "Help Text. Provides additional information.")

End Sub



'/////////////////////////////////////////////////////////////////
'/////////////////////////////////////////////////////////////////



Private Sub option_CareerProgram_Click()

'Dimensions an array used for value passing
Dim array_textboxes(15) As Object

'Assigns selected textboxes to the array_textboxes array
Call Store_TextBox_Objects(array_textboxes, New_Student_No_Parent)

If option_CareerProgram = True Then Call Manipulate_TextBoxes(array_textboxes, True)

End Sub



Private Sub option_FullSemester_Click()

'Dimensions an array used for value passing
Dim array_textboxes(15) As Object

'Assigns selected textboxes to the array_textboxes array
Call Store_TextBox_Objects(array_textboxes, New_Student_No_Parent)

If option_FullSemester = True Then Call Manipulate_TextBoxes(array_textboxes, True)

End Sub



Private Sub option_IndividualCredits_Click()

'Dimensions an array used for value passing
Dim array_textboxes(15) As Object

'Assigns selected textboxes to the array_textboxes array
Call Store_TextBox_Objects(array_textboxes, New_Student_No_Parent)

If option_IndividualCredits = True Then Call Manipulate_TextBoxes(array_textboxes, False)

End Sub



Private Sub option_Calc_by_Installments_Click()

'Clears the total per month option
textbox_DollarsPerMonth_SetVal.Value = vbNullString
textbox_DollarsPerMonth_GetVal.Value = vbNullString

textbox_Student_Fees.Locked = False     'unlocks
textbox_Student_Fees.BackColor = cWhite

textbox_Downpayment_SetVal.Locked = False       'unlocks
textbox_Downpayment_SetVal.BackColor = cWhite

textbox_Installments_SetVal.Locked = False   'unlocks
textbox_Installments_SetVal.BackColor = cWhite

textbox_DollarsPerMonth_SetVal.Locked = True   'locks
textbox_DollarsPerMonth_SetVal.BackColor = cGrey

End Sub



Private Sub option_Calc_by_MonthlyPayments_Click()

'Clears the # of installments option
textbox_Installments_SetVal.Value = vbNullString
textbox_Installments_GetVal.Value = vbNullString

textbox_Student_Fees.Locked = False     'unlocks
textbox_Student_Fees.BackColor = cWhite

textbox_Downpayment_SetVal.Locked = False       'unlocks
textbox_Downpayment_SetVal.BackColor = cWhite

textbox_Installments_SetVal.Locked = True    'locks
textbox_Installments_SetVal.BackColor = cGrey

textbox_DollarsPerMonth_SetVal.Locked = False  'unlocks
textbox_DollarsPerMonth_SetVal.BackColor = cWhite

End Sub



Private Sub option_Payment_in_Full_Click()

'Clears the unnecessary options
textbox_Downpayment_SetVal.Value = vbNullString
textbox_Installments_SetVal.Value = vbNullString
textbox_DollarsPerMonth_SetVal.Value = vbNullString
textbox_DollarsPerMonth_GetVal.Value = vbNullString

textbox_Student_Fees.Locked = False     'unlocks
textbox_Student_Fees.BackColor = cWhite

textbox_Downpayment_SetVal.Locked = True        'locks
textbox_Downpayment_SetVal.BackColor = cGrey

textbox_Installments_SetVal.Locked = True    'locks
textbox_Installments_SetVal.BackColor = cGrey

textbox_DollarsPerMonth_SetVal.Locked = True   'locks
textbox_DollarsPerMonth_SetVal.BackColor = cGrey

End Sub



Private Sub option_No_Cost_Click()

'Clears the unnecessary options
textbox_Student_Tuition.Value = vbNullString
textbox_Student_Fees.Value = vbNullString
textbox_Student_Net.Value = vbNullString

textbox_Downpayment_SetVal.Value = vbNullString
textbox_Installments_SetVal.Value = vbNullString
textbox_DollarsPerMonth_SetVal.Value = vbNullString

textbox_Student_Fees.Locked = True      'locks
textbox_Student_Fees.BackColor = cGrey

textbox_Downpayment_SetVal.Locked = True        'locks
textbox_Downpayment_SetVal.BackColor = cGrey

textbox_Installments_SetVal.Locked = True    'locks
textbox_Installments_SetVal.BackColor = cGrey

textbox_DollarsPerMonth_SetVal.Locked = True   'locks
textbox_DollarsPerMonth_SetVal.BackColor = cGrey

End Sub



Private Sub button_ClearCalculation_Click()

textbox_Student_Tuition.Value = vbNullString
textbox_Student_Fees.Value = vbNullString
textbox_Student_Net.Value = vbNullString

textbox_Downpayment_SetVal.Value = vbNullString
textbox_Installments_SetVal.Value = vbNullString
textbox_DollarsPerMonth_SetVal.Value = vbNullString
textbox_Downpayment_GetVal.Value = vbNullString
textbox_Installments_GetVal.Value = vbNullString
textbox_DollarsPerMonth_GetVal.Value = vbNullString
textbox_Finalpay_approx.Value = vbNullString

End Sub



Private Sub button_Calculate_Click()

Dim str_Message As String
str_Message = vbNullString

Call Calculate_Payments(str_Message)     'within module

If Calculate_Payments(str_Message) = False Then MsgBox str_Message, vbCritical, "Payments Message"

End Sub



Private Function Calculate_Payments(ByRef str_Message As String) As Boolean

'"""
'Passes in the TUI and FEE amounts and returns the calculated values
'"""

Dim db_Remaining_Due As Double
Dim db_Dollars_Per_Month As Double
Dim db_Final_Payment As Double

Dim int_Installments As Integer

db_Remaining_Due = 0
db_Dollars_Per_Month = 0
int_Installments = 0
db_Final_Payment = 0
str_Message = vbNullString

Calculate_Payments = True

'"""
'Part 1: Populate total tuition and fees
'"""

'For full programs/semester, only one value needs to be passed
If option_CareerProgram = True Or option_FullSemester = True Then

    textbox_Student_Tuition = textbox_BaseTuition

'Adds together the individual credit textboxes, then passes the value
ElseIf option_IndividualCredits = True Then

    textbox_Student_Tuition = Val(textbox_ClassTuition0) + Val(textbox_ClassTuition1) + Val(textbox_ClassTuition2) + _
        Val(textbox_ClassTuition3) + Val(textbox_ClassTuition4) + Val(textbox_ClassTuition5) + Val(textbox_ClassTuition6)
    
Else
    
    Calculate_Payments = False
    str_Message = "* No enrollment option has been selected." & vbNewLine

End If

textbox_Student_Net = Val(textbox_Student_Tuition) + Val(textbox_Student_Fees)

'"""
'Part 2: Calculate payments
'"""

If option_No_Cost = True Then

    Call button_ClearCalculation_Click
    
ElseIf option_Payment_in_Full = True Then

    textbox_Downpayment_SetVal = vbNullString
    textbox_Installments_SetVal = vbNullString
    textbox_DollarsPerMonth_SetVal = vbNullString
    textbox_DollarsPerMonth_GetVal = vbNullString
    textbox_Finalpay_approx = vbNullString
    
    textbox_Downpayment_GetVal = textbox_Student_Net
    textbox_Installments_GetVal = 1
    
ElseIf option_Calc_by_MonthlyPayments = True Then

    'Note: The above action also unlocks the textbox_DollarsPerMonth_SetVal field
    '       and locks the textbox_Installments_SetVal field
    
    textbox_Downpayment_GetVal = textbox_Downpayment_SetVal
    textbox_Installments_SetVal = vbNullString
    
    db_Remaining_Due = Val(textbox_Student_Net) - Val(textbox_Downpayment_SetVal)
    
    If Val(textbox_Student_Net) < 0 Then
    
        str_Message = str_Message & _
            "* The NET total must be greater than zero" & vbNewLine
            
        textbox_Downpayment_GetVal = vbNullString
        textbox_Installments_GetVal = vbNullString
        textbox_DollarsPerMonth_GetVal = vbNullString
        textbox_Finalpay_approx = vbNullString
            
        GoTo SkipToFalse
        
    ElseIf db_Remaining_Due < 0 Then
    
        str_Message = str_Message & _
            "* There must be a valid total left for monthly payments:" & vbNewLine & _
            vbTab & Format(textbox_Student_Net, "Currency") & " (NET) - " & _
            Format(textbox_Downpayment_SetVal, "Currency") & " (DP) = " & "-" & _
            Format(str(db_Remaining_Due), "Currency") & " (Remaining)" & vbNewLine
            
        textbox_Downpayment_GetVal = vbNullString
        textbox_Installments_GetVal = vbNullString
        textbox_DollarsPerMonth_GetVal = vbNullString
        textbox_Finalpay_approx = vbNullString
            
        GoTo SkipToFalse
        
    ElseIf textbox_DollarsPerMonth_SetVal < 0 Then
    
        str_Message = str_Message & _
            "* The 'Per Month' entry must be greater than zero." & vbNewLine
            
        textbox_Downpayment_GetVal = vbNullString
        textbox_Installments_GetVal = vbNullString
        textbox_DollarsPerMonth_GetVal = vbNullString
        textbox_Finalpay_approx = vbNullString
        
        GoTo SkipToFalse
        
    Else
    
        db_Dollars_Per_Month = Val(textbox_DollarsPerMonth_SetVal)
        textbox_DollarsPerMonth_GetVal = db_Dollars_Per_Month
        'Note: Backslash indicates integer division
        int_Installments = CInt(db_Remaining_Due) \ Val(textbox_DollarsPerMonth_SetVal)
        textbox_Installments_GetVal = int_Installments
        
        db_Final_Payment = db_Remaining_Due - (int_Installments * db_Dollars_Per_Month)
        textbox_Finalpay_approx = db_Final_Payment
               
    End If

ElseIf option_Calc_by_Installments = True Then

    'Note: The above action also unlocks the textbox_Installments_SetVal field
    '       and locks the textbox_DollarsPerMonth_SetVal field
    
    textbox_Downpayment_GetVal = textbox_Downpayment_SetVal
    textbox_DollarsPerMonth_SetVal = vbNullString
    
    db_Remaining_Due = Val(textbox_Student_Net) - Val(textbox_Downpayment_SetVal)
    
    If Val(textbox_Student_Net) < 0 Then
    
        str_Message = str_Message & _
            "* The NET total must be greater than zero" & vbNewLine
            
        textbox_Downpayment_GetVal = vbNullString
        textbox_Installments_GetVal = vbNullString
        textbox_DollarsPerMonth_GetVal = vbNullString
        textbox_Finalpay_approx = vbNullString
            
        GoTo SkipToFalse
        
    ElseIf db_Remaining_Due < 0 Then
    
        str_Message = str_Message & _
            "* There must be a valid total left for monthly payments:" & vbNewLine & _
            vbTab & Format(textbox_Student_Net, "Currency") & " (NET) - " & _
            Format(textbox_Downpayment_SetVal, "Currency") & " (DP) = " & "-" & _
            Format(str(db_Remaining_Due), "Currency") & " (Remaining)" & vbNewLine
            
        textbox_Downpayment_GetVal = vbNullString
        textbox_Installments_GetVal = vbNullString
        textbox_DollarsPerMonth_GetVal = vbNullString
        textbox_Finalpay_approx = vbNullString
            
        GoTo SkipToFalse
        
    ElseIf textbox_Installments_SetVal < 1 Then
    
        str_Message = str_Message & _
            "* The 'Installments' entry must be greater than one." & vbNewLine
            
        textbox_Downpayment_GetVal = vbNullString
        textbox_Installments_GetVal = vbNullString
        textbox_DollarsPerMonth_GetVal = vbNullString
        textbox_Finalpay_approx = vbNullString
        
        GoTo SkipToFalse
            
    Else
    
        int_Installments = CInt(textbox_Installments_SetVal)
        textbox_Installments_GetVal = int_Installments
        'Note: Backslash indicates integer division
        db_Dollars_Per_Month = db_Remaining_Due \ int_Installments
        'Converts db_Dollars_Per_Month into a truncated integer.  This is done
        '   to more closely approximate the AS400's calculation.
        db_Dollars_Per_Month = CInt(db_Dollars_Per_Month)
        textbox_DollarsPerMonth_GetVal = db_Dollars_Per_Month
        
        db_Final_Payment = db_Remaining_Due - (int_Installments * db_Dollars_Per_Month)
        textbox_Finalpay_approx = db_Final_Payment
        
    End If

Else
    
    Calculate_Payments = False
    str_Message = str_Message & _
        "* No Payment option has been selected." & vbNewLine
    
End If

Cleanup:
Exit Function

SkipToFalse:
Calculate_Payments = False
GoTo Cleanup

End Function



'/////////////////////////////////////////////////////////////////
'/////////////////////////////////////////////////////////////////

Private Sub button_ClearUserform_Click()

Call UserForm_Initialize

End Sub



Private Sub button_Cancel_Click()

Unload Me

End Sub



Private Sub button_Confirm_Click()

'User confirmation
Dim blueMessage As String
Dim redMessage As String

'"""
'cStudent, cRegistration, and cTag are Class Modules.
'"""

'Stores Student Information
Dim Stu As cStudent
Set Stu = New cStudent

'Stores Class and Payment Information
Dim reg As cRegistration
Set reg = New cRegistration

'Stores general information
Dim tag As cTag
Set tag = New cTag

blueMessage = vbNullString
redMessage = vbNullString

Call Convert_From_Textboxes(blueMessage, redMessage, tag, reg, Stu)   'within the module

'Shows the appropriate textbox message
If Len(redMessage) > 1 Then
    MsgBox redMessage, vbCritical, "Please resolve the following issues:"
Else
    MsgBox blueMessage, vbInformation, "Please confirm the following information:"
End If

End Sub

Private Sub button_Launch_Click()

If Not Debugger Then On Error GoTo ErrHandler Else On Error GoTo 0

'Sets the data worksheet values
Dim wsData As Excel.Worksheet
Dim long_row As Long

'User confirmation
Dim blueMessage As String
Dim redMessage As String
Dim str_Confirm As String
Dim str_Export As String

'Stores AS400 objects
Dim objAS400 As Object            'Main AS/400 PS object
Dim obj_AS400_Focus As Object    'Object to focus the AS/400
Dim ConnList As Object      'Object to refresh the AS/400
Dim str_Session As String

'Stores Student Information
Dim Stu As cStudent

'Stores Class and Payment Information
Dim reg As cRegistration

'Stores general information
Dim tag As cTag

'Initialization
Set Stu = New cStudent
Set reg = New cRegistration
Set tag = New cTag
Call Defaults_Off
blueMessage = vbNullString
redMessage = vbNullString
str_Export = vbNullString
str_Session = vbNullString
str_Confirm = "A Student ID# has been generated successfully." & _
                vbNewLine & vbNewLine & "SID:" & vbTab & vbTab

'Preps to pass data to the data sheet
Set wsData = GetSheetFromCodeName(Workbooks("TaskHelper VBA iSeries.xlsm"), "DataSheet")
long_row = wsData.Range("Ref").End(xlDown).Row + 1

'Passes the userform data into the relevant class objects.  This procedure _
    is located within the module.
Call Convert_From_Textboxes(blueMessage, redMessage, tag, reg, Stu) 'within the module

'Connects to the AS/400 Host Automation Objects
str_Session = tag.Session
Call Initialize_AS400(blueMessage, redMessage, str_Session, objAS400, obj_AS400_Focus, ConnList)

'Additional user check against individual college credit codes (a common source of mistakes)
If tag.EnrollmentType = 3 Then If Confirm_Indiv_Course_Codes(reg) = True Then GoTo Cleanup

'Shows the appropriate textbox message
If Len(redMessage) > 1 Then
    MsgBox redMessage, vbCritical, "Please resolve the following issues:"
Else

    If MsgBox(blueMessage, vbOKCancel, "Confirmation") = vbOK Then

        'Sends initial data to the data sheet
        Call InitialData_Student_No(Stu, tag, wsData, long_row)
        Call PassToDataSheet("New_Student_No_Parent", "Userform", wsData, long_row)

        'Runs the first enrollment script
        str_Confirm = Register_into_the_AddressBook(objAS400, obj_AS400_Focus, Stu, tag, reg, wsData, long_row)
    
        'If the above function fails prior to enrollment, then...
        If tag.StudentID = "X" Then GoTo Cleanup
    
        'Allows the following MsgBox to receive focus
        AppActivate ("Microsoft excel")
        If MsgBox(str_Confirm, vbOKCancel, "Student ID") = vbCancel Then
            MsgBox "The registration process has been cancelled", vbInformation, "Cancelled"
            GoTo Cleanup
        End If
    
        'Sends registration data to the data sheet
        Call InitialData_Registration(reg, wsData, long_row)

        'Runs the second enrollment script
        Call Register_into_the_Classes(objAS400, obj_AS400_Focus, Stu, reg, tag, wsData, long_row)

        'Creates an order form and saves it as a PDF file
        str_Export = Create_PDF(Stu, reg, tag)
        Call PassToDataSheet(str_Export, "str_Export", wsData, long_row)
        
        'Final message
        'AppActivate ("Microsoft excel")
        MsgBox "The registration has completed successfully" & vbNewLine & vbNewLine & _
            "SID:" & vbTab & vbTab & tag.StudentID, vbExclamation, "Success!"
        
    End If
End If

Cleanup:
Call Defaults_On

Exit Sub

ErrHandler:
MsgBox "A failure has occurred with the launch script. In case this warning is a mistake, " _
    & "please resolve the following issues before continuing:" & vbNewLine & vbNewLine & redMessage, _
    vbCritical, "Error on Launch"
Resume Cleanup

End Sub



Private Sub Convert_From_Textboxes(blueMessage As String, ByRef redMessage As String, _
    ByRef tag As cTag, ByRef reg As cRegistration, ByRef Stu As cStudent)

'"""
' Passes textbox values into the relevant class objects. The parent procedure will then _
    pass control over to the Registration_Main module for enrollment.
    
' Accepts as two separate string variables: "blueMessage" and "redMessage" which will _
    act as confirmation messages.

'   USERFORM TEXTBOX >>>>> CLASS OBJECT
'"""

On Error GoTo CalcFail

'Populates cost calculations
Call Calculate_Payments(redMessage)

LoadInfo:
If Not Debugger Then On Error GoTo Unknown_Error Else On Error GoTo 0

'Populates the relevant class objects
Call Load_Data_Into_Stu_Class(Stu, New_Student_No_Parent)
Call Load_Data_Into_Reg_Class(reg, New_Student_No_Parent)

'''''''''
'Populating the cTag class object
tag.StudentStatus = False   'Not a current student
tag.StudentID = vbNullString
tag.ParentStatus = False    'No associated parent account

If combo_Activity = "Hide" Then tag.Activity = False Else tag.Activity = True

tag.Session = combo_Session
tag.SalesPerson = textbox_Salesperson
tag.ParentLC = vbNullString
tag.B2BPrefix = "INS"

If option_CareerProgram = True Then
    tag.EnrollmentType = 1
    tag.SchoolCode = "ICS"
    tag.DegreeCode = "N"

ElseIf option_FullSemester = True Then
    tag.EnrollmentType = 2
    tag.SchoolCode = "CDS"
    tag.DegreeCode = "Y"

ElseIf option_IndividualCredits = True Then
    tag.EnrollmentType = 3
    tag.SchoolCode = "CDS"
    tag.DegreeCode = "N"

Else
    tag.EnrollmentType = 0
    tag.SchoolCode = vbNullString
    tag.DegreeCode = vbNullString
End If
'''''''''

'//  Adding to confirmation messages //
'StudentStatus & ParentStatus
blueMessage = blueMessage & "NEW STUDENT, NO PARENT" & vbNewLine & vbNewLine

'Salesperson
If Len(tag.SalesPerson) < 4 Then
    redMessage = redMessage & "* The Salesperson code must be 4 digits long." & vbNewLine
Else
    blueMessage = blueMessage & "Salesperson:" & vbTab & tag.SalesPerson & vbNewLine
End If

'AS400 Session
blueMessage = blueMessage & "AS400 Session:" & vbTab & tag.Session & vbNewLine & vbNewLine

'Enrollment Type
If tag.EnrollmentType = 1 Then
    blueMessage = blueMessage & "Enrollment Type:" & vbTab & "Career Program" & vbNewLine & vbNewLine
ElseIf tag.EnrollmentType = 2 Then
    blueMessage = blueMessage & "Enrollment Type:" & vbTab & "College Semester" & vbNewLine & vbNewLine
ElseIf tag.EnrollmentType = 3 Then
    blueMessage = blueMessage & "Enrollment Type:" & vbTab & "Individual Credits" & vbNewLine & vbNewLine
Else
    redMessage = redMessage & "* The Enrollment Type must be selected." & vbNewLine
End If

'//  Adding to confirmation messages //
Call Confirm_Data_In_Stu_Class(Stu, blueMessage, redMessage)
Call Confirm_Data_In_Reg_Class(reg, blueMessage, redMessage, tag.EnrollmentType)

Cleanup:
Exit Sub

'/// /// /// ///
'ERROR HANDLING
'/// /// /// ///

CalcFail:
redMessage = redMessage & "* Tuition calculation has returned an error" & vbNewLine
Resume LoadInfo

Unknown_Error:
redMessage = redMessage & "* An unexpected error has occurred" & vbNewLine
Resume Next

End Sub





Option Explicit 'Forces explicit declaration of all variables

'===============================
' # NavigateB2B (Module)
'
'Navigates through the AS400's most common PS screens to reach the _
BNIMAIN homescreen.  True if success; False if failure.
'
'Warning: Implementation of this script requires testing before _
applying to a new application.
'
' To-Do List: _
1 - This approach is terribly inefficient; must re-write _
2 - Find a better approach to handling non-B2B screens; encountering _
a non-B2B screen not handled by the CASE switch may crash Excel _
3 - Align procedures with Best Practices
'==================================================================================

Public Function Nav_To_Home_Screen(objAS400 As Object) As Boolean

'Note: The AS/400 will only accept variable numbers as long
Dim byt_Counter, byt_Maximum As Byte    'Stores loop information
Dim get_text As String        'Stores search string
Dim str_date As String           'Stores current date
Dim Milliseconds As Long

Milliseconds = 30

'Maximum number of attempts
byt_Maximum = 5

byt_Counter = 0
get_text = vbNullString
str_date = vbNullString

'This date string helps identify certain B2C PS screens
str_date = Format(Now, "m/dd/yy")

'Sets the overall function to False
If Not Debugger Then On Error GoTo PathError Else On Error GoTo 0

Call WaitForReady(objAS400, Milliseconds)

If objAS400.autECLPS.SearchText(str_date, 2, 2, 80) Then
    GoTo SkipLoop
ElseIf objAS400.autECLPS.SearchText("dialer", 1, 9, 50) Then
    GoTo SkipLoop
End If

Do
    Call WaitForReady(objAS400, Milliseconds)
    get_text = objAS400.autECLPS.GetText(1, 2, 8)
    Call WaitForReady(objAS400, Milliseconds)
        
    Select Case get_text
        
        Case " BNIMAIN"     'PS: BNIMAIN (Destination)
            Nav_To_Home_Screen = True
            Exit Do
                
        Case " BNICS  "     'PS: BNICS
            objAS400.autECLPS.SendKeys ("[pf12]")
            Nav_To_Home_Screen = True
            Exit Do
                
        Case "603131_B"     'PS: Student Service Inquiry (1.14.)
            objAS400.autECLPS.SendKeys ("[pf3]")
            Call WaitForReady(objAS400, Milliseconds)
                
        Case "603132_B"     'PS: (1.14.), Education Services Inquiry
            objAS400.autECLPS.SendKeys ("[pf3]")
            Call WaitForReady(objAS400, Milliseconds)
                
        Case "01051   "     'Address Book Information
            objAS400.autECLPS.SendKeys ("[pf3]")
            Call WaitForReady(objAS400, Milliseconds)
                
        Case " 032002 "     'PS: (1.14.), Customer Ledger Inquiry
            objAS400.autECLPS.SendKeys ("[pf3]")
            Call WaitForReady(objAS400, Milliseconds)
                
        Case "631001  "     'PS: (1.14.), ICS Cancellation Maintenance
            objAS400.autECLPS.SendKeys ("[pf3]")
            Call WaitForReady(objAS400, Milliseconds)
                
        Case "60110   "     'PS: (1.14.), Student Supplemental
            objAS400.autECLPS.SendKeys ("[pf3]")
            Call WaitForReady(objAS400, Milliseconds)
                
        Case "60210   "     'PS: (1.14.), Student Course Master
            objAS400.autECLPS.SendKeys ("[pf3]")
            Call WaitForReady(objAS400, Milliseconds)
                
        Case "42045   "     'PS: (1.14.), Shipping Screen
            objAS400.autECLPS.SendKeys ("[pf3]")
            Call WaitForReady(objAS400, Milliseconds)
                
        Case " ICSACCT"     'PS: ICS Accounting Main Menu
            objAS400.autECLPS.SendKeys ("[pf12]")
            Call WaitForReady(objAS400, Milliseconds)
                
        Case "ICSMAIN "     'PS: Main Menu
            objAS400.autECLPS.SetText "6", 20, 7
            objAS400.autECLPS.SendKeys ("[Enter]")
            Call WaitForReady(objAS400, Milliseconds)
                
        Case " 98VL   "     'Library List Selection
            objAS400.autECLPS.SetText "1", 6, 10
            objAS400.autECLPS.SendKeys ("[Enter]")
            Call WaitForReady(objAS400, Milliseconds)
                
        Case " BNIPROD"
            objAS400.autECLPS.SendKeys ("[pf12]")
            Call WaitForReady(objAS400, Milliseconds)
            objAS400.autECLPS.SendKeys ("[pf12]")
            Call WaitForReady(objAS400, Milliseconds)
                
        Case "        "     'No tag
            objAS400.autECLPS.SendKeys ("[Enter]")
            Call WaitForReady(objAS400, Milliseconds)
            objAS400.autECLPS.SendKeys ("[Enter]")
            Call WaitForReady(objAS400, Milliseconds)
            objAS400.autECLPS.SendKeys ("[Enter]")
            Call WaitForReady(objAS400, Milliseconds)
                
            If objAS400.autECLPS.SearchText("ICSMAIN", 1, 2) Then
                objAS400.autECLPS.SetText "6", 20, 7
                Call WaitForReady(objAS400, Milliseconds)
            End If
                
        End Select
        
    byt_Counter = byt_Counter + 1
        
Loop Until byt_Counter >= byt_Maximum
    
If byt_Counter >= byt_Maximum Then Nav_To_Home_Screen = False

Cleanup:

Exit Function

'///////////////////
'Error/GoTo Handlers
'///////////////////

SkipLoop:
Nav_To_Home_Screen = False
GoTo Cleanup

PathError:
Nav_To_Home_Screen = False
Resume Cleanup

End Function



'==================================================================================
' # Global_Procedures (Module)
'
' Contains global subs and variables for use across multiple modules and worksheets

' To-Do List: _
1 - Evaluate variable and procedure names _
2 - Improve comments (provide better context for procedures/actions) _
3 - Further move actions/calculations to separate modules _
5 - Add Outlook functionality _
6 - Add Github functionality _
7 - Align procedures with a Best Practices approach

'==================================================================================



Private Sub WaitForReady(passAS400 As Object, Milliseconds As Long)

'"""
'Commands the AS/400 to wait until the application is ready for additional input
'
'The ECLOIA object can be accessed as a dot method to the ECLPSession object
'"""

If Not Debugger Then On Error Resume Next Else On Error GoTo 0

passAS400.autECLPS.Wait 10
passAS400.autECLOIA.WaitForAppAvailable
passAS400.autECLOIA.WaitForInputReady
passAS400.autECLPS.Wait Milliseconds

End Sub



Private Sub Defaults_Off()

Application.ScreenUpdating = False
Application.DisplayAlerts = False
Application.Calculation = xlCalculationManual

End Sub



Private Sub Defaults_On()

Application.Calculation = xlCalculationAutomatic
Application.DisplayAlerts = True
Application.ScreenUpdating = True

End Sub



Private Function GetSheetFromCodeName(wb As Workbook, CodeName As String) As Excel.Worksheet

'"""
'|wb| = [Workbook] Name of the Workbook. |CodeName| = [String] The worksheet's code/secret name
'
'Returns Worksheet As Excel.Worksheet

'Referencing a worksheet's codename instead of the worksheet's regular name (or position)
'   allows users to change the sheet's name (or position) without breaking the relevant macros.
'This function allows worksheet codenames to be referenced even across separate workbooks.

'(SOURCE) D Glancy. (2012, Feb 10). Using Worksheet CodeNames in Other Workbooks [Web log].
'   Retrieved from http://yoursumbuddy.com/using-worksheet-codenames-in-other-workbooks/
'"""

Dim wsCN As Excel.Worksheet

If Not Debugger Then On Error Resume Next Else On Error GoTo 0

For Each wsCN In wb.Worksheets

     If wsCN.CodeName = CodeName Then
         Set GetSheetFromCodeName = wsCN
         Exit For
     End If
Next wsCN

End Function



Private Sub NavigateSheets(strStartSheetCodename As String, strEndSheetCodename As String)

'"""
' |strStartSheetCodename| = [String] Name of worksheet to navigate from.
' |strEndSheetCodename| = [String] Name of worksheet to naviage to.
'
'This sub streamlines the user experience by showing only one worksheet at a time.  When the user clicks the
'   commandbutton to move to the next sheet, the previous one closes.
'
'Instead of referencing the sheets' public name, this sub references the sheets' codename.
'"""

Dim wsStart As Excel.Worksheet  'Stores starting worksheet
Dim wsEnd As Excel.Worksheet    'Stores ending worksheet

If Not Debugger Then On Error Resume Next Else On Error GoTo 0

'Calls the GetSheetFromCodeName function
Set wsStart = GetSheetFromCodeName(Workbooks("TaskHelper VBA iSeries.xlsm"), strStartSheetCodename)
Set wsEnd = GetSheetFromCodeName(Workbooks("TaskHelper VBA iSeries.xlsm"), strEndSheetCodename)

wsEnd.Visible = xlSheetVisible
wsEnd.Activate

wsStart.Visible = xlSheetHidden

End Sub



Private Sub RestrictToPostiveWholeNumbers(KeyAscii As MSForms.ReturnInteger)

'"""
'Restricts the textbox to accept only numerals
'"""

Select Case KeyAscii
     Case Asc("0") To Asc("9")
     Case Else
         KeyAscii = 0
 End Select

End Sub



Private Sub RestrictToPostiveFloatNumbers(KeyAscii As MSForms.ReturnInteger, str_textbox As String)

'"""
'Restricts the textbox to accept only real numbers
'"""

Select Case KeyAscii
     Case Asc("0") To Asc("9")
     Case Asc(".")
         If InStr(1, str_textbox, ".") > 0 Then
             KeyAscii = 0
         End If
     Case Else
         KeyAscii = 0
 End Select

End Sub



Private Function TextEntry(str_label As String, v_variable As Variant) As String

'Depreciated

'"""
'Formats entries for use on error reports. Takes an entry's "label" and
'   appends a colon and two tab returns.  Takes a variable, checks to see
'   if it's a string, then converts it to a string if it's not.
'"""

Dim strTypeName As String

TextEntry = str_label & ":" & vbTab & vbTab

'Note: The TypeName function returns the variable's type as a string
strTypeName = TypeName(v_variable)

If strTypeName = "Empty" Then
    TextEntry = TextEntry & ""
    
ElseIf strTypeName = "String" Then
    TextEntry = TextEntry & v_variable

Else
    TextEntry = TextEntry & CStr(v_variable)
End If

End Function



Private Sub Initialize_AS400(ByRef blueMessage As String, ByRef redMessage As String, passSession As String, _
    ByRef passAS400 As Object, ByRef obj_AS400_Focus As Object, ByRef PassConnList As Object)

If Not Debugger Then On Error GoTo GoToScript Else On Error GoTo 0

'Sets the main AS/400 objects
Set passAS400 = CreateObject("PCOMM.autECLSession")
Set obj_AS400_Focus = CreateObject("PCOMM.autECLWinMetrics")
Set PassConnList = CreateObject("PCOMM.autECLConnList")

'Sets the connection to the AS400 Presentation Space
passAS400.SetConnectionByName (passSession)
obj_AS400_Focus.SetConnectionByName (passSession)    'Used only for setting the focus

'Checks to see if the AS400 Session is connected
If passAS400.Started = False Then GoTo GoToScript
blueMessage = blueMessage & vbNewLine & "AS400 Session: " & vbTab & passSession & vbNewLine

'Checks to see if communications are enabled
If passAS400.CommStarted = False Then GoTo GoToScript
blueMessage = blueMessage & "AS400 Host:" & vbTab & "Connection Enabled" & vbNewLine

'Checks to see if the AS400 is ready
If passAS400.Ready = False Then GoTo GoToScript
blueMessage = blueMessage & "AS400 Pres Space:" & vbTab & "Ready" & vbNewLine & vbNewLine

'Refreshes the AS/400's Connection List (Recommended for autECLWinMetrics)
PassConnList.Refresh

Cleanup:
Exit Sub

ErrorScript:
redMessage = vbNewLine & redMessage & "* Error (Gate 01): THE AS400 SESSION HAS FAILED TO CONNECT" & vbNewLine
Resume Cleanup

GoToScript:
redMessage = vbNewLine & redMessage & "* Error (Gate 01): THE AS400 SESSION HAS FAILED TO CONNECT" & vbNewLine
GoTo Cleanup

End Sub



