''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' cException (Class)
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Sets custom error functionality. Overloaded to include call stack procedures.
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Option Explicit

'GENERAL PROPERTIES
Private pFlag As Boolean '.Flag
Private pNumber As Integer '.Number
Private pDescription As String '.Description
Private pMessage As String '.Message

'CALL STACK PROPERTIES
'   .Push
'   .Pop
'   .StackEmpty
'   .StackTop
Public siTop As StackItem

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' LOCAL PROCEDURES
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub Class_Initialize()
    pFlag = False
End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' GENERAL PROPERTIES
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' .Flag property
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Property Let Flag(Value As Boolean)
    pFlag = Value
End Property
Public Property Get Flag() As Boolean
    Flag = pFlag
End Property

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' .Number property
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Property Let Number(Value As Integer)
    pNumber = Value
End Property
Public Property Get Number() As Integer
    Number = pNumber
End Property

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' .Description property
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Property Let Description(Value As String)
    pDescription = Value
End Property
Public Property Get Description() As String
    Description = pDescription
End Property

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Message property
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Property Let Message(Value As String)
    pMessage = Value
End Property
Public Property Get Message() As String
    Message = pMessage
End Property

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' STACK PROPERTIES AND PROCEDURES
'The following code is courtesy of the MSDN
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Public Sub Push(ByVal varText As Variant)
    ' Add a new item to the top of the stack.
    Dim siNewTop As New StackItem
    siNewTop.Value = varText
    Set siNewTop.NextItem = siTop
    Set siTop = siNewTop
End Sub

Public Function Pop() As Variant
    If Not StackEmpty Then
        ' Get the value from the current top stack element.
        ' Then, get a reference to the new stack top.
        Pop = siTop.Value
        Set siTop = siTop.NextItem
    End If
End Function

Property Get StackEmpty() As Boolean
    ' Is the stack empty?  It can
    ' only be empty if siTop is Nothing.
    StackEmpty = (siTop Is Nothing)
End Property

Property Get StackTop() As Variant
    If StackEmpty Then
        StackTop = Null
    Else
        StackTop = siTop.Value
    End If
End Property
