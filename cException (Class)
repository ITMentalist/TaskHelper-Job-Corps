''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' cException (Class)
'
' Relies on a call stack approach to help report the location of errors
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'GENERAL PROPERTIES
Private pErrFlag As Boolean
Private pErrNumber As Integer
Private pErrDescription As String
Private pMessage As String

'CALL STACK PROPERTIES
Public siTop As StackItem

'LogErrorDescription Function
'LogErrorNumberFunction
'WriteErrorToFile Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' LOCAL PROCEDURES
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub Class_Initialize()
    pErrFlag = False
End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' STACK PROPERTIES AND PROCEDURES
'The following code is courtesy of the MSDN
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Public Sub Push(ByVal varText As Variant)
    ' Add a new item to the top of the stack.
    Dim siNewTop As New StackItem
    siNewTop.Value = varText
    Set siNewTop.NextItem = siTop
    Set siTop = siNewTop
End Sub

Public Function Pop() As Variant
    If Not StackEmpty Then
        ' Get the value from the current top stack element.
        ' Then, get a reference to the new stack top.
        Pop = siTop.Value
        Set siTop = siTop.NextItem
    End If
End Function

Property Get StackEmpty() As Boolean
    ' Is the stack empty?  It can
    ' only be empty if siTop is Nothing.
    StackEmpty = (siTop Is Nothing)
End Property

Property Get StackTop() As Variant
    If StackEmpty Then
        StackTop = Null
    Else
        StackTop = siTop.Value
    End If
End Property

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' ErrFlag property
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Property Let ErrFlag(Value As Boolean)
    pErrFlag = Value
End Property
Public Property Get ErrFlag() As Boolean
    ErrFlag = pErrFlag
End Property

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' ErrDescription property
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Property Let ErrDescription(Value As String)
    pErrDescription = Value
End Property
Public Property Get ErrDescription() As String
    ErrDescription = pErrDescription
End Property

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Message property
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Property Let Message(Value As String)
    pMessage = Value
End Property
Public Property Get Message() As String
    Message = pMessage
End Property



